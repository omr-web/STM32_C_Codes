
lab3_problem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  0800048c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000064  080004f0  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  080004f0  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f93  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002fc  00000000  00000000  0002101f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  00021320  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000213a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000006d0  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000779  00000000  00000000  00021ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00022241  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000028c  00000000  00000000  000222bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800046c 	.word	0x0800046c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	0800046c 	.word	0x0800046c

08000104 <__aeabi_lmul>:
 8000104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000106:	46ce      	mov	lr, r9
 8000108:	4647      	mov	r7, r8
 800010a:	0415      	lsls	r5, r2, #16
 800010c:	0c2d      	lsrs	r5, r5, #16
 800010e:	002e      	movs	r6, r5
 8000110:	b580      	push	{r7, lr}
 8000112:	0407      	lsls	r7, r0, #16
 8000114:	0c14      	lsrs	r4, r2, #16
 8000116:	0c3f      	lsrs	r7, r7, #16
 8000118:	4699      	mov	r9, r3
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	437e      	muls	r6, r7
 800011e:	435d      	muls	r5, r3
 8000120:	4367      	muls	r7, r4
 8000122:	4363      	muls	r3, r4
 8000124:	197f      	adds	r7, r7, r5
 8000126:	0c34      	lsrs	r4, r6, #16
 8000128:	19e4      	adds	r4, r4, r7
 800012a:	469c      	mov	ip, r3
 800012c:	42a5      	cmp	r5, r4
 800012e:	d903      	bls.n	8000138 <__aeabi_lmul+0x34>
 8000130:	2380      	movs	r3, #128	; 0x80
 8000132:	025b      	lsls	r3, r3, #9
 8000134:	4698      	mov	r8, r3
 8000136:	44c4      	add	ip, r8
 8000138:	464b      	mov	r3, r9
 800013a:	4343      	muls	r3, r0
 800013c:	4351      	muls	r1, r2
 800013e:	0c25      	lsrs	r5, r4, #16
 8000140:	0436      	lsls	r6, r6, #16
 8000142:	4465      	add	r5, ip
 8000144:	0c36      	lsrs	r6, r6, #16
 8000146:	0424      	lsls	r4, r4, #16
 8000148:	19a4      	adds	r4, r4, r6
 800014a:	195b      	adds	r3, r3, r5
 800014c:	1859      	adds	r1, r3, r1
 800014e:	0020      	movs	r0, r4
 8000150:	bc0c      	pop	{r2, r3}
 8000152:	4690      	mov	r8, r2
 8000154:	4699      	mov	r9, r3
 8000156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000158 <HardFault_Handler>:
#include<stdlib.h>
#define LEDDELAY    5000
#define LEDDELAY2    500000
void delay(volatile uint32_t);

void HardFault_Handler(){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	GPIOA->ODR  |= (1<<4);
 800015c:	23a0      	movs	r3, #160	; 0xa0
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	695a      	ldr	r2, [r3, #20]
 8000162:	23a0      	movs	r3, #160	; 0xa0
 8000164:	05db      	lsls	r3, r3, #23
 8000166:	2110      	movs	r1, #16
 8000168:	430a      	orrs	r2, r1
 800016a:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY2);
 800016c:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HardFault_Handler+0x2c>)
 800016e:	0018      	movs	r0, r3
 8000170:	f000 f854 	bl	800021c <delay>
	SCB->AIRCR=0x5FA8004;//reset the software
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HardFault_Handler+0x30>)
 8000176:	4a05      	ldr	r2, [pc, #20]	; (800018c <HardFault_Handler+0x34>)
 8000178:	60da      	str	r2, [r3, #12]
	Reset_Handler();
 800017a:	f000 f85f 	bl	800023c <Reset_Handler>

}
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	0007a120 	.word	0x0007a120
 8000188:	e000ed00 	.word	0xe000ed00
 800018c:	05fa8004 	.word	0x05fa8004

08000190 <main>:
int main(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
    /* Enable GPIOB and GPIOA clock */
    RCC->IOPENR |= (3U << 0);
 8000196:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <main+0x78>)
 8000198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800019a:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <main+0x78>)
 800019c:	2103      	movs	r1, #3
 800019e:	430a      	orrs	r2, r1
 80001a0:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup PB3 as input */
    GPIOB->MODER &= ~(3U << 2*3);
 80001a2:	4b1a      	ldr	r3, [pc, #104]	; (800020c <main+0x7c>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <main+0x7c>)
 80001a8:	21c0      	movs	r1, #192	; 0xc0
 80001aa:	438a      	bics	r2, r1
 80001ac:	601a      	str	r2, [r3, #0]

    /* Setup PA4 as output */
    GPIOA->MODER &= ~(3U << 2*4);
 80001ae:	23a0      	movs	r3, #160	; 0xa0
 80001b0:	05db      	lsls	r3, r3, #23
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	23a0      	movs	r3, #160	; 0xa0
 80001b6:	05db      	lsls	r3, r3, #23
 80001b8:	4915      	ldr	r1, [pc, #84]	; (8000210 <main+0x80>)
 80001ba:	400a      	ands	r2, r1
 80001bc:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1U << 2*4);
 80001be:	23a0      	movs	r3, #160	; 0xa0
 80001c0:	05db      	lsls	r3, r3, #23
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	23a0      	movs	r3, #160	; 0xa0
 80001c6:	05db      	lsls	r3, r3, #23
 80001c8:	2180      	movs	r1, #128	; 0x80
 80001ca:	0049      	lsls	r1, r1, #1
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]


    /* Setup PB3 as input */
       GPIOB->MODER &= ~(3U << 2*3);
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <main+0x7c>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <main+0x7c>)
 80001d6:	21c0      	movs	r1, #192	; 0xc0
 80001d8:	438a      	bics	r2, r1
 80001da:	601a      	str	r2, [r3, #0]
       int a =rand() %2;
 80001dc:	f000 f888 	bl	80002f0 <rand>
 80001e0:	0002      	movs	r2, r0
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <main+0x84>)
 80001e4:	4013      	ands	r3, r2
 80001e6:	d504      	bpl.n	80001f2 <main+0x62>
 80001e8:	3b01      	subs	r3, #1
 80001ea:	2202      	movs	r2, #2
 80001ec:	4252      	negs	r2, r2
 80001ee:	4313      	orrs	r3, r2
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]

    while(1) {
    	//GPIOB->ODR &=  ~(1<<3);
    	//delay(LEDDELAY);
    	if((GPIOB->IDR>>3)&1){
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x7c>)
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	08db      	lsrs	r3, r3, #3
 80001fa:	2201      	movs	r2, #1
 80001fc:	4013      	ands	r3, r2
 80001fe:	d0f9      	beq.n	80001f4 <main+0x64>
    		__asm("ldr r1,=#0x20000001");
 8000200:	4905      	ldr	r1, [pc, #20]	; (8000218 <main+0x88>)
    		//__asm("ldr r1,=#0x8100000");
    		__asm("ldr r5 ,[r1]");
 8000202:	680d      	ldr	r5, [r1, #0]
    	if((GPIOB->IDR>>3)&1){
 8000204:	e7f6      	b.n	80001f4 <main+0x64>
 8000206:	46c0      	nop			; (mov r8, r8)
 8000208:	40021000 	.word	0x40021000
 800020c:	50000400 	.word	0x50000400
 8000210:	fffffcff 	.word	0xfffffcff
 8000214:	80000001 	.word	0x80000001
 8000218:	20000001 	.word	0x20000001

0800021c <delay>:

    }

    return 0;
}
void delay(volatile uint32_t s) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000224:	e002      	b.n	800022c <delay+0x10>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	3b01      	subs	r3, #1
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1f9      	bne.n	8000226 <delay+0xa>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000240:	f000 f826 	bl	8000290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	; (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f81d 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ff8f 	bl	8000190 <main>

08000272 <LoopForever>:

LoopForever:
    b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000280:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000284:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000288:	20000090 	.word	0x20000090

0800028c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC_COMP_IRQHandler>
	...

08000290 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <SystemInit+0x14>)
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0512      	lsls	r2, r2, #20
 800029a:	609a      	str	r2, [r3, #8]
#endif
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2600      	movs	r6, #0
 80002ac:	4d0c      	ldr	r5, [pc, #48]	; (80002e0 <__libc_init_array+0x38>)
 80002ae:	4c0d      	ldr	r4, [pc, #52]	; (80002e4 <__libc_init_array+0x3c>)
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	2600      	movs	r6, #0
 80002ba:	f000 f8d7 	bl	800046c <_init>
 80002be:	4d0a      	ldr	r5, [pc, #40]	; (80002e8 <__libc_init_array+0x40>)
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <__libc_init_array+0x44>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	00b3      	lsls	r3, r6, #2
 80002ce:	58eb      	ldr	r3, [r5, r3]
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	00b3      	lsls	r3, r6, #2
 80002d8:	58eb      	ldr	r3, [r5, r3]
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000484 	.word	0x08000484
 80002e4:	08000484 	.word	0x08000484
 80002e8:	08000484 	.word	0x08000484
 80002ec:	08000488 	.word	0x08000488

080002f0 <rand>:
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <rand+0x4c>)
 80002f2:	b510      	push	{r4, lr}
 80002f4:	681c      	ldr	r4, [r3, #0]
 80002f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10f      	bne.n	800031c <rand+0x2c>
 80002fc:	2018      	movs	r0, #24
 80002fe:	f000 f829 	bl	8000354 <malloc>
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <rand+0x50>)
 8000304:	63a0      	str	r0, [r4, #56]	; 0x38
 8000306:	6003      	str	r3, [r0, #0]
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <rand+0x54>)
 800030a:	2201      	movs	r2, #1
 800030c:	6043      	str	r3, [r0, #4]
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <rand+0x58>)
 8000310:	6083      	str	r3, [r0, #8]
 8000312:	230b      	movs	r3, #11
 8000314:	8183      	strh	r3, [r0, #12]
 8000316:	2300      	movs	r3, #0
 8000318:	6102      	str	r2, [r0, #16]
 800031a:	6143      	str	r3, [r0, #20]
 800031c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800031e:	4a0b      	ldr	r2, [pc, #44]	; (800034c <rand+0x5c>)
 8000320:	6920      	ldr	r0, [r4, #16]
 8000322:	6961      	ldr	r1, [r4, #20]
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <rand+0x60>)
 8000326:	f7ff feed 	bl	8000104 <__aeabi_lmul>
 800032a:	2201      	movs	r2, #1
 800032c:	2300      	movs	r3, #0
 800032e:	1880      	adds	r0, r0, r2
 8000330:	4159      	adcs	r1, r3
 8000332:	6120      	str	r0, [r4, #16]
 8000334:	6161      	str	r1, [r4, #20]
 8000336:	0048      	lsls	r0, r1, #1
 8000338:	0840      	lsrs	r0, r0, #1
 800033a:	bd10      	pop	{r4, pc}
 800033c:	20000000 	.word	0x20000000
 8000340:	abcd330e 	.word	0xabcd330e
 8000344:	e66d1234 	.word	0xe66d1234
 8000348:	0005deec 	.word	0x0005deec
 800034c:	4c957f2d 	.word	0x4c957f2d
 8000350:	5851f42d 	.word	0x5851f42d

08000354 <malloc>:
 8000354:	b510      	push	{r4, lr}
 8000356:	4b03      	ldr	r3, [pc, #12]	; (8000364 <malloc+0x10>)
 8000358:	0001      	movs	r1, r0
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	f000 f804 	bl	8000368 <_malloc_r>
 8000360:	bd10      	pop	{r4, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	20000000 	.word	0x20000000

08000368 <_malloc_r>:
 8000368:	2303      	movs	r3, #3
 800036a:	b570      	push	{r4, r5, r6, lr}
 800036c:	1ccd      	adds	r5, r1, #3
 800036e:	439d      	bics	r5, r3
 8000370:	3508      	adds	r5, #8
 8000372:	0006      	movs	r6, r0
 8000374:	2d0c      	cmp	r5, #12
 8000376:	d21e      	bcs.n	80003b6 <_malloc_r+0x4e>
 8000378:	250c      	movs	r5, #12
 800037a:	42a9      	cmp	r1, r5
 800037c:	d81d      	bhi.n	80003ba <_malloc_r+0x52>
 800037e:	0030      	movs	r0, r6
 8000380:	f000 f862 	bl	8000448 <__malloc_lock>
 8000384:	4a25      	ldr	r2, [pc, #148]	; (800041c <_malloc_r+0xb4>)
 8000386:	6814      	ldr	r4, [r2, #0]
 8000388:	0021      	movs	r1, r4
 800038a:	2900      	cmp	r1, #0
 800038c:	d119      	bne.n	80003c2 <_malloc_r+0x5a>
 800038e:	4c24      	ldr	r4, [pc, #144]	; (8000420 <_malloc_r+0xb8>)
 8000390:	6823      	ldr	r3, [r4, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d103      	bne.n	800039e <_malloc_r+0x36>
 8000396:	0030      	movs	r0, r6
 8000398:	f000 f844 	bl	8000424 <_sbrk_r>
 800039c:	6020      	str	r0, [r4, #0]
 800039e:	0029      	movs	r1, r5
 80003a0:	0030      	movs	r0, r6
 80003a2:	f000 f83f 	bl	8000424 <_sbrk_r>
 80003a6:	1c43      	adds	r3, r0, #1
 80003a8:	d12b      	bne.n	8000402 <_malloc_r+0x9a>
 80003aa:	230c      	movs	r3, #12
 80003ac:	0030      	movs	r0, r6
 80003ae:	6033      	str	r3, [r6, #0]
 80003b0:	f000 f84b 	bl	800044a <__malloc_unlock>
 80003b4:	e003      	b.n	80003be <_malloc_r+0x56>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	dadf      	bge.n	800037a <_malloc_r+0x12>
 80003ba:	230c      	movs	r3, #12
 80003bc:	6033      	str	r3, [r6, #0]
 80003be:	2000      	movs	r0, #0
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
 80003c2:	680b      	ldr	r3, [r1, #0]
 80003c4:	1b5b      	subs	r3, r3, r5
 80003c6:	d419      	bmi.n	80003fc <_malloc_r+0x94>
 80003c8:	2b0b      	cmp	r3, #11
 80003ca:	d903      	bls.n	80003d4 <_malloc_r+0x6c>
 80003cc:	600b      	str	r3, [r1, #0]
 80003ce:	18cc      	adds	r4, r1, r3
 80003d0:	6025      	str	r5, [r4, #0]
 80003d2:	e003      	b.n	80003dc <_malloc_r+0x74>
 80003d4:	684b      	ldr	r3, [r1, #4]
 80003d6:	428c      	cmp	r4, r1
 80003d8:	d10d      	bne.n	80003f6 <_malloc_r+0x8e>
 80003da:	6013      	str	r3, [r2, #0]
 80003dc:	0030      	movs	r0, r6
 80003de:	f000 f834 	bl	800044a <__malloc_unlock>
 80003e2:	0020      	movs	r0, r4
 80003e4:	2207      	movs	r2, #7
 80003e6:	300b      	adds	r0, #11
 80003e8:	1d23      	adds	r3, r4, #4
 80003ea:	4390      	bics	r0, r2
 80003ec:	1ac3      	subs	r3, r0, r3
 80003ee:	d0e7      	beq.n	80003c0 <_malloc_r+0x58>
 80003f0:	425a      	negs	r2, r3
 80003f2:	50e2      	str	r2, [r4, r3]
 80003f4:	e7e4      	b.n	80003c0 <_malloc_r+0x58>
 80003f6:	6063      	str	r3, [r4, #4]
 80003f8:	000c      	movs	r4, r1
 80003fa:	e7ef      	b.n	80003dc <_malloc_r+0x74>
 80003fc:	000c      	movs	r4, r1
 80003fe:	6849      	ldr	r1, [r1, #4]
 8000400:	e7c3      	b.n	800038a <_malloc_r+0x22>
 8000402:	2303      	movs	r3, #3
 8000404:	1cc4      	adds	r4, r0, #3
 8000406:	439c      	bics	r4, r3
 8000408:	42a0      	cmp	r0, r4
 800040a:	d0e1      	beq.n	80003d0 <_malloc_r+0x68>
 800040c:	1a21      	subs	r1, r4, r0
 800040e:	0030      	movs	r0, r6
 8000410:	f000 f808 	bl	8000424 <_sbrk_r>
 8000414:	1c43      	adds	r3, r0, #1
 8000416:	d1db      	bne.n	80003d0 <_malloc_r+0x68>
 8000418:	e7c7      	b.n	80003aa <_malloc_r+0x42>
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	20000080 	.word	0x20000080
 8000420:	20000084 	.word	0x20000084

08000424 <_sbrk_r>:
 8000424:	2300      	movs	r3, #0
 8000426:	b570      	push	{r4, r5, r6, lr}
 8000428:	4c06      	ldr	r4, [pc, #24]	; (8000444 <_sbrk_r+0x20>)
 800042a:	0005      	movs	r5, r0
 800042c:	0008      	movs	r0, r1
 800042e:	6023      	str	r3, [r4, #0]
 8000430:	f000 f80c 	bl	800044c <_sbrk>
 8000434:	1c43      	adds	r3, r0, #1
 8000436:	d103      	bne.n	8000440 <_sbrk_r+0x1c>
 8000438:	6823      	ldr	r3, [r4, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d000      	beq.n	8000440 <_sbrk_r+0x1c>
 800043e:	602b      	str	r3, [r5, #0]
 8000440:	bd70      	pop	{r4, r5, r6, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	2000008c 	.word	0x2000008c

08000448 <__malloc_lock>:
 8000448:	4770      	bx	lr

0800044a <__malloc_unlock>:
 800044a:	4770      	bx	lr

0800044c <_sbrk>:
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <_sbrk+0x18>)
 800044e:	0002      	movs	r2, r0
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	2900      	cmp	r1, #0
 8000454:	d101      	bne.n	800045a <_sbrk+0xe>
 8000456:	4904      	ldr	r1, [pc, #16]	; (8000468 <_sbrk+0x1c>)
 8000458:	6019      	str	r1, [r3, #0]
 800045a:	6818      	ldr	r0, [r3, #0]
 800045c:	1882      	adds	r2, r0, r2
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000088 	.word	0x20000088
 8000468:	20000090 	.word	0x20000090

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
