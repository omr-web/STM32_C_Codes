
lab4_problem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080006a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080006ac  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  080006ac  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b32  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000335  00000000  00000000  00020b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e0  00000000  00000000  00020e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00020f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000007cc  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000061b  00000000  00000000  000217ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00021e07  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000214  00000000  00000000  00021e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000648 	.word	0x08000648

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000648 	.word	0x08000648

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b7f      	cmp	r3, #127	; 0x7f
 8000230:	d828      	bhi.n	8000284 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000232:	4a2f      	ldr	r2, [pc, #188]	; (80002f0 <__NVIC_SetPriority+0xd4>)
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b25b      	sxtb	r3, r3
 800023a:	089b      	lsrs	r3, r3, #2
 800023c:	33c0      	adds	r3, #192	; 0xc0
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	589b      	ldr	r3, [r3, r2]
 8000242:	1dfa      	adds	r2, r7, #7
 8000244:	7812      	ldrb	r2, [r2, #0]
 8000246:	0011      	movs	r1, r2
 8000248:	2203      	movs	r2, #3
 800024a:	400a      	ands	r2, r1
 800024c:	00d2      	lsls	r2, r2, #3
 800024e:	21ff      	movs	r1, #255	; 0xff
 8000250:	4091      	lsls	r1, r2
 8000252:	000a      	movs	r2, r1
 8000254:	43d2      	mvns	r2, r2
 8000256:	401a      	ands	r2, r3
 8000258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	019b      	lsls	r3, r3, #6
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	401a      	ands	r2, r3
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	0018      	movs	r0, r3
 8000268:	2303      	movs	r3, #3
 800026a:	4003      	ands	r3, r0
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000270:	481f      	ldr	r0, [pc, #124]	; (80002f0 <__NVIC_SetPriority+0xd4>)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b25b      	sxtb	r3, r3
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	430a      	orrs	r2, r1
 800027c:	33c0      	adds	r3, #192	; 0xc0
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000282:	e031      	b.n	80002e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000284:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <__NVIC_SetPriority+0xd8>)
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	0019      	movs	r1, r3
 800028c:	230f      	movs	r3, #15
 800028e:	400b      	ands	r3, r1
 8000290:	3b08      	subs	r3, #8
 8000292:	089b      	lsrs	r3, r3, #2
 8000294:	3306      	adds	r3, #6
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	18d3      	adds	r3, r2, r3
 800029a:	3304      	adds	r3, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	1dfa      	adds	r2, r7, #7
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	0011      	movs	r1, r2
 80002a4:	2203      	movs	r2, #3
 80002a6:	400a      	ands	r2, r1
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	21ff      	movs	r1, #255	; 0xff
 80002ac:	4091      	lsls	r1, r2
 80002ae:	000a      	movs	r2, r1
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	401a      	ands	r2, r3
 80002b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	019b      	lsls	r3, r3, #6
 80002ba:	22ff      	movs	r2, #255	; 0xff
 80002bc:	401a      	ands	r2, r3
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	2303      	movs	r3, #3
 80002c6:	4003      	ands	r3, r0
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <__NVIC_SetPriority+0xd8>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	001c      	movs	r4, r3
 80002d4:	230f      	movs	r3, #15
 80002d6:	4023      	ands	r3, r4
 80002d8:	3b08      	subs	r3, #8
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	430a      	orrs	r2, r1
 80002de:	3306      	adds	r3, #6
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	18c3      	adds	r3, r0, r3
 80002e4:	3304      	adds	r3, #4
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b003      	add	sp, #12
 80002ee:	bd90      	pop	{r4, r7, pc}
 80002f0:	e000e100 	.word	0xe000e100
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <SysTick_Config+0x40>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d901      	bls.n	800030e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800030a:	2301      	movs	r3, #1
 800030c:	e010      	b.n	8000330 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <SysTick_Config+0x44>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	3a01      	subs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000316:	2301      	movs	r3, #1
 8000318:	425b      	negs	r3, r3
 800031a:	2103      	movs	r1, #3
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff ff7d 	bl	800021c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <SysTick_Config+0x44>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <SysTick_Config+0x44>)
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800032e:	2300      	movs	r3, #0
}
 8000330:	0018      	movs	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}
 8000338:	00ffffff 	.word	0x00ffffff
 800033c:	e000e010 	.word	0xe000e010

08000340 <Delay_ms>:
#include "stm32g0xx.h"
#include "system.h"

uint32_t counter=0;

void Delay_ms(uint32_t time){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	counter=time;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <Delay_ms+0x20>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
	while(counter);
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <Delay_ms+0x20>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1fb      	bne.n	8000350 <Delay_ms+0x10>
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000020 	.word	0x20000020

08000364 <SysTick_Handler>:
void SysTick_Handler(){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	if(counter>0){
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <SysTick_Handler+0x1c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <SysTick_Handler+0x16>
		counter--;
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <SysTick_Handler+0x1c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	4b02      	ldr	r3, [pc, #8]	; (8000380 <SysTick_Handler+0x1c>)
 8000378:	601a      	str	r2, [r3, #0]
	}
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000020 	.word	0x20000020

08000384 <System_Init>:


void System_Init(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000388:	f000 f8b6 	bl	80004f8 <SystemCoreClockUpdate>
    System_LED_Init();
 800038c:	f000 f812 	bl	80003b4 <System_LED_Init>
	System_Button_Init();
 8000390:	f000 f850 	bl	8000434 <System_Button_Init>
	SysTick_Config(SystemCoreClock/1000); //for 1 s
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <System_Init+0x2c>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	23fa      	movs	r3, #250	; 0xfa
 800039a:	0099      	lsls	r1, r3, #2
 800039c:	0010      	movs	r0, r2
 800039e:	f7ff feb1 	bl	8000104 <__udivsi3>
 80003a2:	0003      	movs	r3, r0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f7ff ffa7 	bl	80002f8 <SysTick_Config>
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000000 	.word	0x20000000

080003b4 <System_LED_Init>:

void System_LED_Init(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	 /* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <System_LED_Init+0x48>)
 80003ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <System_LED_Init+0x48>)
 80003be:	2103      	movs	r1, #3
 80003c0:	430a      	orrs	r2, r1
 80003c2:	635a      	str	r2, [r3, #52]	; 0x34
	 /* Setup PA0 as output */
	    GPIOA->MODER |=(1U<<0); // GPIOA_MODER first bit is equal to 1
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2101      	movs	r1, #1
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &=  ~(1U<<1);// GPIOA_MODER second bit is equal to 0
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	23a0      	movs	r3, #160	; 0xa0
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2102      	movs	r1, #2
 80003e0:	438a      	bics	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]

	    GPIOA->BRR |=(1<<0);
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003ea:	23a0      	movs	r3, #160	; 0xa0
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	2101      	movs	r1, #1
 80003f0:	430a      	orrs	r2, r1
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <System_LED_Set>:
void System_LED_Toggle(){
	GPIOA->ODR ^=(1<<0);
}

void System_LED_Set(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<0); // GPIOA'ODR first bit is 1
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	2101      	movs	r1, #1
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <System_LED_Reset>:
void System_LED_Reset(){
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
	GPIOA->ODR &=  ~(1U<<0); // GPIOA's ODR first bit is 0
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	23a0      	movs	r3, #160	; 0xa0
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	2101      	movs	r1, #1
 800042a:	438a      	bics	r2, r1
 800042c:	615a      	str	r2, [r3, #20]
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <System_Button_Init>:

void System_Button_Init(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <System_Button_Init+0x24>)
 800043a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <System_Button_Init+0x24>)
 800043e:	2103      	movs	r1, #3
 8000440:	430a      	orrs	r2, r1
 8000442:	635a      	str	r2, [r3, #52]	; 0x34
    /*set pb7 as input */
	    GPIOB->MODER &= ~(3U << 2*7);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <System_Button_Init+0x28>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <System_Button_Init+0x28>)
 800044a:	4905      	ldr	r1, [pc, #20]	; (8000460 <System_Button_Init+0x2c>)
 800044c:	400a      	ands	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40021000 	.word	0x40021000
 800045c:	50000400 	.word	0x50000400
 8000460:	ffff3fff 	.word	0xffff3fff

08000464 <main>:
#include "System.h"




int main(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	System_Init();
 8000468:	f7ff ff8c 	bl	8000384 <System_Init>

    while(1) {
    	System_LED_Set();
 800046c:	f7ff ffc8 	bl	8000400 <System_LED_Set>
    	Delay_ms(1000);
 8000470:	23fa      	movs	r3, #250	; 0xfa
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff63 	bl	8000340 <Delay_ms>
    	System_LED_Reset();
 800047a:	f7ff ffce 	bl	800041a <System_LED_Reset>
    	Delay_ms(1000);
 800047e:	23fa      	movs	r3, #250	; 0xfa
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff ff5c 	bl	8000340 <Delay_ms>
    	System_LED_Set();
 8000488:	e7f0      	b.n	800046c <main+0x8>
	...

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000490:	f000 f826 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	; (80004cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <LoopForever+0xe>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	; (80004d8 <LoopForever+0x16>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ba:	f000 f8a1 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff ffd1 	bl	8000464 <main>

080004c2 <LoopForever>:

LoopForever:
    b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>
  ldr   r0, =_estack
 80004c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004d0:	080006a8 	.word	0x080006a8
  ldr r2, =_sbss
 80004d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004d8:	20000024 	.word	0x20000024

080004dc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC_COMP_IRQHandler>
	...

080004e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <SystemInit+0x14>)
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	0512      	lsls	r2, r2, #20
 80004ea:	609a      	str	r2, [r3, #8]
#endif
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80004fe:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	2238      	movs	r2, #56	; 0x38
 8000504:	4013      	ands	r3, r2
 8000506:	2b10      	cmp	r3, #16
 8000508:	d016      	beq.n	8000538 <SystemCoreClockUpdate+0x40>
 800050a:	d802      	bhi.n	8000512 <SystemCoreClockUpdate+0x1a>
 800050c:	2b08      	cmp	r3, #8
 800050e:	d005      	beq.n	800051c <SystemCoreClockUpdate+0x24>
 8000510:	e046      	b.n	80005a0 <SystemCoreClockUpdate+0xa8>
 8000512:	2b18      	cmp	r3, #24
 8000514:	d006      	beq.n	8000524 <SystemCoreClockUpdate+0x2c>
 8000516:	2b20      	cmp	r3, #32
 8000518:	d009      	beq.n	800052e <SystemCoreClockUpdate+0x36>
 800051a:	e041      	b.n	80005a0 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800051c:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 800051e:	4a35      	ldr	r2, [pc, #212]	; (80005f4 <SystemCoreClockUpdate+0xfc>)
 8000520:	601a      	str	r2, [r3, #0]
      break;
 8000522:	e04f      	b.n	80005c4 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSI:  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8000524:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 8000526:	22fa      	movs	r2, #250	; 0xfa
 8000528:	01d2      	lsls	r2, r2, #7
 800052a:	601a      	str	r2, [r3, #0]
      break;
 800052c:	e04a      	b.n	80005c4 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSE:  /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 800052e:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	0212      	lsls	r2, r2, #8
 8000534:	601a      	str	r2, [r3, #0]
      break;
 8000536:	e045      	b.n	80005c4 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	2203      	movs	r2, #3
 800053e:	4013      	ands	r3, r2
 8000540:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	091b      	lsrs	r3, r3, #4
 8000548:	2207      	movs	r2, #7
 800054a:	4013      	ands	r3, r2
 800054c:	3301      	adds	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	2b03      	cmp	r3, #3
 8000554:	d106      	bne.n	8000564 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8000556:	68f9      	ldr	r1, [r7, #12]
 8000558:	4826      	ldr	r0, [pc, #152]	; (80005f4 <SystemCoreClockUpdate+0xfc>)
 800055a:	f7ff fdd3 	bl	8000104 <__udivsi3>
 800055e:	0003      	movs	r3, r0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e005      	b.n	8000570 <SystemCoreClockUpdate+0x78>
      }
      else /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000564:	68f9      	ldr	r1, [r7, #12]
 8000566:	4824      	ldr	r0, [pc, #144]	; (80005f8 <SystemCoreClockUpdate+0x100>)
 8000568:	f7ff fdcc 	bl	8000104 <__udivsi3>
 800056c:	0003      	movs	r3, r0
 800056e:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	227f      	movs	r2, #127	; 0x7f
 8000578:	401a      	ands	r2, r3
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4353      	muls	r3, r2
 800057e:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	0f5b      	lsrs	r3, r3, #29
 8000586:	2207      	movs	r2, #7
 8000588:	4013      	ands	r3, r2
 800058a:	3301      	adds	r3, #1
 800058c:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 800058e:	68b9      	ldr	r1, [r7, #8]
 8000590:	6978      	ldr	r0, [r7, #20]
 8000592:	f7ff fdb7 	bl	8000104 <__udivsi3>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 800059c:	601a      	str	r2, [r3, #0]
      break;
 800059e:	e011      	b.n	80005c4 <SystemCoreClockUpdate+0xcc>
      
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
    default:                /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	0adb      	lsrs	r3, r3, #11
 80005a6:	2207      	movs	r2, #7
 80005a8:	4013      	ands	r3, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0013      	movs	r3, r2
 80005b0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <SystemCoreClockUpdate+0x100>)
 80005b6:	f7ff fda5 	bl	8000104 <__udivsi3>
 80005ba:	0003      	movs	r3, r0
 80005bc:	001a      	movs	r2, r3
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 80005c0:	601a      	str	r2, [r3, #0]
      break;
 80005c2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <SystemCoreClockUpdate+0xf4>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	220f      	movs	r2, #15
 80005cc:	401a      	ands	r2, r3
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SystemCoreClockUpdate+0x104>)
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	58d3      	ldr	r3, [r2, r3]
 80005d4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	40da      	lsrs	r2, r3
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <SystemCoreClockUpdate+0xf8>)
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b006      	add	sp, #24
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000
 80005f0:	20000000 	.word	0x20000000
 80005f4:	007a1200 	.word	0x007a1200
 80005f8:	00f42400 	.word	0x00f42400
 80005fc:	08000660 	.word	0x08000660

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	; (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	2600      	movs	r6, #0
 8000612:	f000 f819 	bl	8000648 <_init>
 8000616:	4d0a      	ldr	r5, [pc, #40]	; (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	00b3      	lsls	r3, r6, #2
 8000626:	58eb      	ldr	r3, [r5, r3]
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	00b3      	lsls	r3, r6, #2
 8000630:	58eb      	ldr	r3, [r5, r3]
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	080006a0 	.word	0x080006a0
 800063c:	080006a0 	.word	0x080006a0
 8000640:	080006a0 	.word	0x080006a0
 8000644:	080006a4 	.word	0x080006a4

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
