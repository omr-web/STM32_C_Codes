
lab5_problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  080004e8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  080004e8  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000cc4  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000344  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e8  00000000  00000000  00011518  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000007ea  00000000  00000000  000116b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000006b5  00000000  00000000  00011e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  0001254f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000210  00000000  00000000  000125cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080004c8 	.word	0x080004c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080004c8 	.word	0x080004c8

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <System_Init>:
volatile int control_interrupt=0;
volatile uint32_t number=0; // our counter value.this value increse 1000 at  every seconds
							// for example if timer come to handler function five times, number should be 5000
							//after ten times our seven segment display 9999

void System_Init(){// all initialize are this function
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0


    System_Alternate_LED_Init();   // led initialize
 8000218:	f000 f8aa 	bl	8000370 <System_Alternate_LED_Init>
	System_Button_Init();  //button initialize
 800021c:	f000 f8dc 	bl	80003d8 <System_Button_Init>
	System_Timer_Init();  // timer initialize
 8000220:	f000 f804 	bl	800022c <System_Timer_Init>
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <System_Timer_Init>:

void System_Timer_Init(){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
		RCC->APBENR1 |=(1U<<1); // timer3 clock is enabled
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <System_Timer_Init+0xb0>)
 8000232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000234:	4b29      	ldr	r3, [pc, #164]	; (80002dc <System_Timer_Init+0xb0>)
 8000236:	2102      	movs	r1, #2
 8000238:	430a      	orrs	r2, r1
 800023a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CR1=0;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <System_Timer_Init+0xb4>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
		TIM3->CR1 |=(1<<7); // arpe bit set
 8000242:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <System_Timer_Init+0xb4>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <System_Timer_Init+0xb4>)
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	430a      	orrs	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
		TIM3->CNT =0;
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <System_Timer_Init+0xb4>)
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->PSC=10;
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <System_Timer_Init+0xb4>)
 8000256:	220a      	movs	r2, #10
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR=(16000); // every 10 ms ,timer come
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <System_Timer_Init+0xb4>)
 800025c:	22fa      	movs	r2, #250	; 0xfa
 800025e:	0192      	lsls	r2, r2, #6
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->DIER |=(1<<0); // enable interrupts
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <System_Timer_Init+0xb4>)
 8000264:	68da      	ldr	r2, [r3, #12]
 8000266:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <System_Timer_Init+0xb4>)
 8000268:	2101      	movs	r1, #1
 800026a:	430a      	orrs	r2, r1
 800026c:	60da      	str	r2, [r3, #12]


		TIM3->CCMR1 |=(1<<3); // output compare preload enable
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <System_Timer_Init+0xb4>)
 8000270:	699a      	ldr	r2, [r3, #24]
 8000272:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <System_Timer_Init+0xb4>)
 8000274:	2108      	movs	r1, #8
 8000276:	430a      	orrs	r2, r1
 8000278:	619a      	str	r2, [r3, #24]

		TIM3->CCMR1 &= ~ (1u<<16); //0
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <System_Timer_Init+0xb4>)
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <System_Timer_Init+0xb4>)
 8000280:	4918      	ldr	r1, [pc, #96]	; (80002e4 <System_Timer_Init+0xb8>)
 8000282:	400a      	ands	r2, r1
 8000284:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |=(1u<<6); //1
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <System_Timer_Init+0xb4>)
 8000288:	699a      	ldr	r2, [r3, #24]
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <System_Timer_Init+0xb4>)
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	430a      	orrs	r2, r1
 8000290:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= (1u<<5); //1
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <System_Timer_Init+0xb4>)
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <System_Timer_Init+0xb4>)
 8000298:	2120      	movs	r1, #32
 800029a:	430a      	orrs	r2, r1
 800029c:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 &= ~(1u<<4);  // 0
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <System_Timer_Init+0xb4>)
 80002a0:	699a      	ldr	r2, [r3, #24]
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <System_Timer_Init+0xb4>)
 80002a4:	2110      	movs	r1, #16
 80002a6:	438a      	bics	r2, r1
 80002a8:	619a      	str	r2, [r3, #24]

		TIM3->CCER |=(1<<0);// (capture compare 1) enable
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <System_Timer_Init+0xb4>)
 80002ac:	6a1a      	ldr	r2, [r3, #32]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <System_Timer_Init+0xb4>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	621a      	str	r2, [r3, #32]


		TIM3->CCR1 =0x0;// duty cycle
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <System_Timer_Init+0xb4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34

		//TIM3->AF1 |=(1<<14); //TİM3 af1 register ertsel comp1 output(?)
		//TIM3->EGR |= (1<<0); // update genration
		TIM3->CR1 |= (1<<0);
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <System_Timer_Init+0xb4>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <System_Timer_Init+0xb4>)
 80002c2:	2101      	movs	r1, #1
 80002c4:	430a      	orrs	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]

		NVIC_SetPriority(TIM3_IRQn,1);
 80002c8:	2101      	movs	r1, #1
 80002ca:	2010      	movs	r0, #16
 80002cc:	f7ff ff34 	bl	8000138 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM3_IRQn);
 80002d0:	2010      	movs	r0, #16
 80002d2:	f7ff ff17 	bl	8000104 <__NVIC_EnableIRQ>

}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40000400 	.word	0x40000400
 80002e4:	fffeffff 	.word	0xfffeffff

080002e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	if(i==16000) // if i=16000,LED brightness should decrease
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <TIM3_IRQHandler+0x7c>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	23fa      	movs	r3, #250	; 0xfa
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d103      	bne.n	8000300 <TIM3_IRQHandler+0x18>
		flag=1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <TIM3_IRQHandler+0x80>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
 80002fe:	e006      	b.n	800030e <TIM3_IRQHandler+0x26>
	else if(i==0) // if i=0,LED brightness should increase
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <TIM3_IRQHandler+0x7c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d102      	bne.n	800030e <TIM3_IRQHandler+0x26>
		flag=0;
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <TIM3_IRQHandler+0x80>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]

	if(flag==1)
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <TIM3_IRQHandler+0x80>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d107      	bne.n	8000326 <TIM3_IRQHandler+0x3e>
		i=i-500;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <TIM3_IRQHandler+0x7c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3bf5      	subs	r3, #245	; 0xf5
 800031c:	3bff      	subs	r3, #255	; 0xff
 800031e:	001a      	movs	r2, r3
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <TIM3_IRQHandler+0x7c>)
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	e00a      	b.n	800033c <TIM3_IRQHandler+0x54>
	else if (flag==0)
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <TIM3_IRQHandler+0x80>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d106      	bne.n	800033c <TIM3_IRQHandler+0x54>
		i=i+500;
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <TIM3_IRQHandler+0x7c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	33f5      	adds	r3, #245	; 0xf5
 8000334:	33ff      	adds	r3, #255	; 0xff
 8000336:	001a      	movs	r2, r3
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <TIM3_IRQHandler+0x7c>)
 800033a:	601a      	str	r2, [r3, #0]

	TIM3->CCR1 =i;
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <TIM3_IRQHandler+0x84>)
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <TIM3_IRQHandler+0x7c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6353      	str	r3, [r2, #52]	; 0x34

	TIM3->SR &=  ~(1U<<0); // update sr registers
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <TIM3_IRQHandler+0x84>)
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <TIM3_IRQHandler+0x84>)
 800034a:	2101      	movs	r1, #1
 800034c:	438a      	bics	r2, r1
 800034e:	611a      	str	r2, [r3, #16]
	TIM3->SR &=  ~(1U<<1);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <TIM3_IRQHandler+0x84>)
 8000352:	691a      	ldr	r2, [r3, #16]
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <TIM3_IRQHandler+0x84>)
 8000356:	2102      	movs	r1, #2
 8000358:	438a      	bics	r2, r1
 800035a:	611a      	str	r2, [r3, #16]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	2000001c 	.word	0x2000001c
 8000368:	20000020 	.word	0x20000020
 800036c:	40000400 	.word	0x40000400

08000370 <System_Alternate_LED_Init>:



void System_Alternate_LED_Init(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	 /* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <System_Alternate_LED_Init+0x5c>)
 8000376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <System_Alternate_LED_Init+0x5c>)
 800037a:	2103      	movs	r1, #3
 800037c:	430a      	orrs	r2, r1
 800037e:	635a      	str	r2, [r3, #52]	; 0x34
	 /* Setup PA6 as alternate function */

		GPIOA->MODER &= ~(3U << 2*6);  //PA6 RESET
 8000380:	23a0      	movs	r3, #160	; 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	4911      	ldr	r1, [pc, #68]	; (80003d0 <System_Alternate_LED_Init+0x60>)
 800038c:	400a      	ands	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |=  (2<< 2*6) ;  //PA6 SET AS alternate function 10
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	430a      	orrs	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]

		GPIOA->AFR[0]  &= ~(0xFU<<4*6);  //af1... reset
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	6a1a      	ldr	r2, [r3, #32]
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	4909      	ldr	r1, [pc, #36]	; (80003d4 <System_Alternate_LED_Init+0x64>)
 80003ae:	400a      	ands	r2, r1
 80003b0:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0]  |=  (1<<4*6);//pa6 af1
 80003b2:	23a0      	movs	r3, #160	; 0xa0
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	6a1a      	ldr	r2, [r3, #32]
 80003b8:	23a0      	movs	r3, #160	; 0xa0
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	0449      	lsls	r1, r1, #17
 80003c0:	430a      	orrs	r2, r1
 80003c2:	621a      	str	r2, [r3, #32]

}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	40021000 	.word	0x40021000
 80003d0:	ffffcfff 	.word	0xffffcfff
 80003d4:	f0ffffff 	.word	0xf0ffffff

080003d8 <System_Button_Init>:
	GPIOA->ODR &=  ~(1U<<6); // GPIOA's ODR first bit is 0
}



void System_Button_Init(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	/* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <System_Button_Init+0x24>)
 80003de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <System_Button_Init+0x24>)
 80003e2:	2103      	movs	r1, #3
 80003e4:	430a      	orrs	r2, r1
 80003e6:	635a      	str	r2, [r3, #52]	; 0x34
    /*set pb7 as input */
	    GPIOB->MODER &= ~(3U << 2*7);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <System_Button_Init+0x28>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <System_Button_Init+0x28>)
 80003ee:	4905      	ldr	r1, [pc, #20]	; (8000404 <System_Button_Init+0x2c>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000
 8000400:	50000400 	.word	0x50000400
 8000404:	ffff3fff 	.word	0xffff3fff

08000408 <main>:





int main(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	System_Init();
 800040c:	f7ff ff02 	bl	8000214 <System_Init>


    while(1) {
 8000410:	e7fe      	b.n	8000410 <main+0x8>
	...

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000418:	f000 f826 	bl	8000468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f81d 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff ffdf 	bl	8000408 <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000024 	.word	0x20000024

08000464 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_COMP_IRQHandler>
	...

08000468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <SystemInit+0x14>)
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	0512      	lsls	r2, r2, #20
 8000472:	609a      	str	r2, [r3, #8]
#endif
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	2600      	movs	r6, #0
 8000484:	4d0c      	ldr	r5, [pc, #48]	; (80004b8 <__libc_init_array+0x38>)
 8000486:	4c0d      	ldr	r4, [pc, #52]	; (80004bc <__libc_init_array+0x3c>)
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	42a6      	cmp	r6, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	2600      	movs	r6, #0
 8000492:	f000 f819 	bl	80004c8 <_init>
 8000496:	4d0a      	ldr	r5, [pc, #40]	; (80004c0 <__libc_init_array+0x40>)
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <__libc_init_array+0x44>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	00b3      	lsls	r3, r6, #2
 80004a6:	58eb      	ldr	r3, [r5, r3]
 80004a8:	4798      	blx	r3
 80004aa:	3601      	adds	r6, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	00b3      	lsls	r3, r6, #2
 80004b0:	58eb      	ldr	r3, [r5, r3]
 80004b2:	4798      	blx	r3
 80004b4:	3601      	adds	r6, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	080004e0 	.word	0x080004e0
 80004bc:	080004e0 	.word	0x080004e0
 80004c0:	080004e0 	.word	0x080004e0
 80004c4:	080004e4 	.word	0x080004e4

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
