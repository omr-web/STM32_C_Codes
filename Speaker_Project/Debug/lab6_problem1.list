
lab6_problem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001284  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001340  08001348  00011348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001340  08001340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08001348  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08001348  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00011348  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001a56  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006d2  00000000  00000000  00012dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000220  00000000  00000000  00013498  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000136b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000011b9  00000000  00000000  00013870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008f3  00000000  00000000  00014a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  0001531c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000005b8  00000000  00000000  00015398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001328 	.word	0x08001328

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08001328 	.word	0x08001328

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <Keypad_Library_Init>:
#include "Keypad.h"
//#include "SSD.h"
#include "Process.h"
#include "System.h"

void Keypad_Library_Init(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	System_Keypad_Output_Init();
 8000330:	f000 f806 	bl	8000340 <System_Keypad_Output_Init>
	System_Keypad_Button_Init();
 8000334:	f000 f8b2 	bl	800049c <System_Keypad_Button_Init>
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <System_Keypad_Output_Init>:

void System_Keypad_Output_Init(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	 RCC->IOPENR |= (3U << 0); // GPIOA and GPIOB clock enable
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <System_Keypad_Output_Init+0xa0>)
 8000346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <System_Keypad_Output_Init+0xa0>)
 800034a:	2103      	movs	r1, #3
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
	 GPIOA->MODER &=  ~(3U<<2*12); //pa12 as output ,in the keypad R1
 8000350:	23a0      	movs	r3, #160	; 0xa0
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	23a0      	movs	r3, #160	; 0xa0
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	4922      	ldr	r1, [pc, #136]	; (80003e4 <System_Keypad_Output_Init+0xa4>)
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1U<<2*12);
 8000360:	23a0      	movs	r3, #160	; 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	23a0      	movs	r3, #160	; 0xa0
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0449      	lsls	r1, r1, #17
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]


	 GPIOA->MODER &=  ~(3U <<2*7); //pa7  as output ,in the keypad R2
 8000372:	23a0      	movs	r3, #160	; 0xa0
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	23a0      	movs	r3, #160	; 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	491a      	ldr	r1, [pc, #104]	; (80003e8 <System_Keypad_Output_Init+0xa8>)
 800037e:	400a      	ands	r2, r1
 8000380:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2*7);
 8000382:	23a0      	movs	r3, #160	; 0xa0
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	23a0      	movs	r3, #160	; 0xa0
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	01c9      	lsls	r1, r1, #7
 8000390:	430a      	orrs	r2, r1
 8000392:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*9); //pa9  as output ,in the keypad R3
 8000394:	23a0      	movs	r3, #160	; 0xa0
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	23a0      	movs	r3, #160	; 0xa0
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	4913      	ldr	r1, [pc, #76]	; (80003ec <System_Keypad_Output_Init+0xac>)
 80003a0:	400a      	ands	r2, r1
 80003a2:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2*9);
 80003a4:	23a0      	movs	r3, #160	; 0xa0
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	23a0      	movs	r3, #160	; 0xa0
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	02c9      	lsls	r1, r1, #11
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*10); //pa10  as output ,in the keypad R4
 80003b6:	23a0      	movs	r3, #160	; 0xa0
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	23a0      	movs	r3, #160	; 0xa0
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	490b      	ldr	r1, [pc, #44]	; (80003f0 <System_Keypad_Output_Init+0xb0>)
 80003c2:	400a      	ands	r2, r1
 80003c4:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2*10);
 80003c6:	23a0      	movs	r3, #160	; 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	23a0      	movs	r3, #160	; 0xa0
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0349      	lsls	r1, r1, #13
 80003d4:	430a      	orrs	r2, r1
 80003d6:	601a      	str	r2, [r3, #0]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	40021000 	.word	0x40021000
 80003e4:	fcffffff 	.word	0xfcffffff
 80003e8:	ffff3fff 	.word	0xffff3fff
 80003ec:	fff3ffff 	.word	0xfff3ffff
 80003f0:	ffcfffff 	.word	0xffcfffff

080003f4 <System_Keypad_Set>:
void System_Keypad_Set(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<12);  //pa6 set,R1 set
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	23a0      	movs	r3, #160	; 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	0149      	lsls	r1, r1, #5
 8000406:	430a      	orrs	r2, r1
 8000408:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<7);  //pa7 set,R2 set
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	23a0      	movs	r3, #160	; 0xa0
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<9);  //pa9 set,R3 set
 800041a:	23a0      	movs	r3, #160	; 0xa0
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	23a0      	movs	r3, #160	; 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0089      	lsls	r1, r1, #2
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<10);  //pa10 set,R4 set
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	00c9      	lsls	r1, r1, #3
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <System_Keypad_Reset>:
void System_Keypad_Reset(){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	GPIOA->ODR &=  ~(1U <<12); //pa6 reset,R1 reset
 8000448:	23a0      	movs	r3, #160	; 0xa0
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	490f      	ldr	r1, [pc, #60]	; (8000490 <System_Keypad_Reset+0x4c>)
 8000454:	400a      	ands	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<7); //pa7 reset,R2 reset
 8000458:	23a0      	movs	r3, #160	; 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	23a0      	movs	r3, #160	; 0xa0
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	438a      	bics	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<9); //pa9 reset,R3 reset
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	4908      	ldr	r1, [pc, #32]	; (8000494 <System_Keypad_Reset+0x50>)
 8000474:	400a      	ands	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<10);  //pa10 reset,R4 reset
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	23a0      	movs	r3, #160	; 0xa0
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	4905      	ldr	r1, [pc, #20]	; (8000498 <System_Keypad_Reset+0x54>)
 8000484:	400a      	ands	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	ffffefff 	.word	0xffffefff
 8000494:	fffffdff 	.word	0xfffffdff
 8000498:	fffffbff 	.word	0xfffffbff

0800049c <System_Keypad_Button_Init>:
void System_Keypad_Button_Init(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	 RCC->IOPENR |= (3U << 0); // GPIOA and GPIOB clock enable
 80004a0:	4b57      	ldr	r3, [pc, #348]	; (8000600 <System_Keypad_Button_Init+0x164>)
 80004a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a4:	4b56      	ldr	r3, [pc, #344]	; (8000600 <System_Keypad_Button_Init+0x164>)
 80004a6:	2103      	movs	r1, #3
 80004a8:	430a      	orrs	r2, r1
 80004aa:	635a      	str	r2, [r3, #52]	; 0x34
	/*set pb7 as input */ // in keypad C1
		GPIOB->MODER &= ~(3U << 2*7);
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b54      	ldr	r3, [pc, #336]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004b2:	4955      	ldr	r1, [pc, #340]	; (8000608 <System_Keypad_Button_Init+0x16c>)
 80004b4:	400a      	ands	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]
		GPIOB->PUPDR |= (2U << 2*7);
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004ba:	68da      	ldr	r2, [r3, #12]
 80004bc:	4b51      	ldr	r3, [pc, #324]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0209      	lsls	r1, r1, #8
 80004c2:	430a      	orrs	r2, r1
 80004c4:	60da      	str	r2, [r3, #12]
	/*set pb8 as input */ // in keypad C2
		GPIOB->MODER &= ~(3U << 2*8);
 80004c6:	4b4f      	ldr	r3, [pc, #316]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b4e      	ldr	r3, [pc, #312]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004cc:	494f      	ldr	r1, [pc, #316]	; (800060c <System_Keypad_Button_Init+0x170>)
 80004ce:	400a      	ands	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]
		GPIOB->PUPDR |= (2U << 2*8);
 80004d2:	4b4c      	ldr	r3, [pc, #304]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004d4:	68da      	ldr	r2, [r3, #12]
 80004d6:	4b4b      	ldr	r3, [pc, #300]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0289      	lsls	r1, r1, #10
 80004dc:	430a      	orrs	r2, r1
 80004de:	60da      	str	r2, [r3, #12]
	/*set pb9 as input */ // in keypad C3
		GPIOB->MODER &= ~(3U << 2*9);
 80004e0:	4b48      	ldr	r3, [pc, #288]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b47      	ldr	r3, [pc, #284]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004e6:	494a      	ldr	r1, [pc, #296]	; (8000610 <System_Keypad_Button_Init+0x174>)
 80004e8:	400a      	ands	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
		GPIOB->PUPDR |= (2U << 2*9);
 80004ec:	4b45      	ldr	r3, [pc, #276]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004ee:	68da      	ldr	r2, [r3, #12]
 80004f0:	4b44      	ldr	r3, [pc, #272]	; (8000604 <System_Keypad_Button_Init+0x168>)
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0309      	lsls	r1, r1, #12
 80004f6:	430a      	orrs	r2, r1
 80004f8:	60da      	str	r2, [r3, #12]
	/*set pa15 as input */ // in keypad C4
		GPIOA->MODER &= ~(3U << 2*15);
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	23a0      	movs	r3, #160	; 0xa0
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	0892      	lsrs	r2, r2, #2
 8000508:	601a      	str	r2, [r3, #0]
		GPIOA->PUPDR |= (2U << 2*15);
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0609      	lsls	r1, r1, #24
 8000518:	430a      	orrs	r2, r1
 800051a:	60da      	str	r2, [r3, #12]

	/* arrangement pb7 as interrupt*/
	    EXTI->RTSR1 |=(1U<<7);
 800051c:	4b3d      	ldr	r3, [pc, #244]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
	    EXTI->EXTICR[1] |= (1U<<8*3);
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800052a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800052c:	4b39      	ldr	r3, [pc, #228]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0449      	lsls	r1, r1, #17
 8000532:	430a      	orrs	r2, r1
 8000534:	665a      	str	r2, [r3, #100]	; 0x64
	    EXTI->IMR1 |=(1<<7);
 8000536:	4a37      	ldr	r2, [pc, #220]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	58d3      	ldr	r3, [r2, r3]
 800053c:	4935      	ldr	r1, [pc, #212]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	4313      	orrs	r3, r2
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	508b      	str	r3, [r1, r2]
	    NVIC_SetPriority(EXTI4_15_IRQn,0);
 8000546:	2100      	movs	r1, #0
 8000548:	2007      	movs	r0, #7
 800054a:	f7ff fe81 	bl	8000250 <__NVIC_SetPriority>
	    NVIC_EnableIRQ(EXTI4_15_IRQn);
 800054e:	2007      	movs	r0, #7
 8000550:	f7ff fe64 	bl	800021c <__NVIC_EnableIRQ>

    /* arrangement pb8 as interrupt*/
	    EXTI->RTSR1 |=(1U<<8);
 8000554:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0049      	lsls	r1, r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
	    EXTI->EXTICR[2] |= (1U<<8*0);
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000564:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	669a      	str	r2, [r3, #104]	; 0x68
	    EXTI->IMR1 |=(1<<8);
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	58d3      	ldr	r3, [r2, r3]
 8000574:	4927      	ldr	r1, [pc, #156]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	4313      	orrs	r3, r2
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	508b      	str	r3, [r1, r2]
	    NVIC_SetPriority(EXTI4_15_IRQn,0);
 8000580:	2100      	movs	r1, #0
 8000582:	2007      	movs	r0, #7
 8000584:	f7ff fe64 	bl	8000250 <__NVIC_SetPriority>
	   	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000588:	2007      	movs	r0, #7
 800058a:	f7ff fe47 	bl	800021c <__NVIC_EnableIRQ>


	/* arrangement pb9 as interrupt*/
	    EXTI->RTSR1 |=(1U<<9);
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <System_Keypad_Button_Init+0x178>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0089      	lsls	r1, r1, #2
 8000598:	430a      	orrs	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
	    EXTI->EXTICR[2] |= (1U<<8*1);
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <System_Keypad_Button_Init+0x178>)
 800059e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	0049      	lsls	r1, r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	669a      	str	r2, [r3, #104]	; 0x68
 	    EXTI->IMR1 |=(1<<9);
 80005aa:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	58d3      	ldr	r3, [r2, r3]
 80005b0:	4918      	ldr	r1, [pc, #96]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	4313      	orrs	r3, r2
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	508b      	str	r3, [r1, r2]
 	    NVIC_SetPriority(EXTI4_15_IRQn,0);
 80005bc:	2100      	movs	r1, #0
 80005be:	2007      	movs	r0, #7
 80005c0:	f7ff fe46 	bl	8000250 <__NVIC_SetPriority>
 	  	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005c4:	2007      	movs	r0, #7
 80005c6:	f7ff fe29 	bl	800021c <__NVIC_EnableIRQ>


    /* arrangement pa15 as interrupt*/
	    EXTI->RTSR1 |=(1U<<15);
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0209      	lsls	r1, r1, #8
 80005d4:	430a      	orrs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
	    //EXTI->EXTICR[1] |= (1U<<8*0);
	    EXTI->IMR1 |=(1<<15);
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	58d3      	ldr	r3, [r2, r3]
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <System_Keypad_Button_Init+0x178>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	4313      	orrs	r3, r2
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	508b      	str	r3, [r1, r2]
	    NVIC_SetPriority(EXTI4_15_IRQn,0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2007      	movs	r0, #7
 80005ee:	f7ff fe2f 	bl	8000250 <__NVIC_SetPriority>
	   	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005f2:	2007      	movs	r0, #7
 80005f4:	f7ff fe12 	bl	800021c <__NVIC_EnableIRQ>

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000
 8000604:	50000400 	.word	0x50000400
 8000608:	ffff3fff 	.word	0xffff3fff
 800060c:	fffcffff 	.word	0xfffcffff
 8000610:	fff3ffff 	.word	0xfff3ffff
 8000614:	40021800 	.word	0x40021800

08000618 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler (){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

	Delay(1000); // for bouncing
 800061c:	23fa      	movs	r3, #250	; 0xfa
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fdff 	bl	8001224 <Delay>
	System_Keypad_Reset();
 8000626:	f7ff ff0d 	bl	8000444 <System_Keypad_Reset>
	if((EXTI->RPR1>>7)&1){ // C1 Button is pressed (1,4,7,*)
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	09db      	lsrs	r3, r3, #7
 8000630:	2201      	movs	r2, #1
 8000632:	4013      	ands	r3, r2
 8000634:	d008      	beq.n	8000648 <EXTI4_15_IRQHandler+0x30>
		Process_C1_Check_Function();
 8000636:	f000 f83d 	bl	80006b4 <Process_C1_Check_Function>
		EXTI->RPR1 |=(1<<7);
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800063c:	68da      	ldr	r2, [r3, #12]
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	430a      	orrs	r2, r1
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	e02e      	b.n	80006a6 <EXTI4_15_IRQHandler+0x8e>
	}
	else if((EXTI->RPR1>>8)&1){  // c2 button is pressed (2,5,8,0)
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	d009      	beq.n	8000668 <EXTI4_15_IRQHandler+0x50>
		Process_C2_Check_Function();
 8000654:	f000 f8a0 	bl	8000798 <Process_C2_Check_Function>
		EXTI->RPR1 |=(1<<8);
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800065a:	68da      	ldr	r2, [r3, #12]
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	0049      	lsls	r1, r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	e01e      	b.n	80006a6 <EXTI4_15_IRQHandler+0x8e>
	}
	else if((EXTI->RPR1>>9)&1){// c3 button is pressed (3,6,9,#)
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a5b      	lsrs	r3, r3, #9
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	d009      	beq.n	8000688 <EXTI4_15_IRQHandler+0x70>
		Process_C3_Check_Function();
 8000674:	f000 f904 	bl	8000880 <Process_C3_Check_Function>
		EXTI->RPR1 |=(1<<9);
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0089      	lsls	r1, r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	e00e      	b.n	80006a6 <EXTI4_15_IRQHandler+0x8e>
	}

	else if((EXTI->RPR1>>15)&1){ // c4 button is pressed (a,b,c,d)
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0bdb      	lsrs	r3, r3, #15
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	d008      	beq.n	80006a6 <EXTI4_15_IRQHandler+0x8e>
		Process_C4_Check_Function();
 8000694:	f000 f968 	bl	8000968 <Process_C4_Check_Function>

		EXTI->RPR1 |=(1<<15);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <EXTI4_15_IRQHandler+0x98>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0209      	lsls	r1, r1, #8
 80006a2:	430a      	orrs	r2, r1
 80006a4:	60da      	str	r2, [r3, #12]
		}

	System_Keypad_Set();
 80006a6:	f7ff fea5 	bl	80003f4 <System_Keypad_Set>

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021800 	.word	0x40021800

080006b4 <Process_C1_Check_Function>:

#include "Keypad.h"
#include "Process.h"
#include "System.h"

void Process_C1_Check_Function(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<12);  //R1 Check
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0149      	lsls	r1, r1, #5
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR>>7)&1){ // if it is true ,user push the one;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <Process_C1_Check_Function+0xd4>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	09db      	lsrs	r3, r3, #7
 80006d0:	2201      	movs	r2, #1
 80006d2:	4013      	ands	r3, r2
 80006d4:	d004      	beq.n	80006e0 <Process_C1_Check_Function+0x2c>
					i=440; //Set frequency 440Hz
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <Process_C1_Check_Function+0xd8>)
 80006d8:	22dc      	movs	r2, #220	; 0xdc
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	801a      	strh	r2, [r3, #0]
				}

		   }

	}
}
 80006de:	e050      	b.n	8000782 <Process_C1_Check_Function+0xce>
			GPIOA->ODR &=  ~(1U <<12);// user dont push '1' (R1)
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	4929      	ldr	r1, [pc, #164]	; (8000790 <Process_C1_Check_Function+0xdc>)
 80006ec:	400a      	ands	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<7);  //R2 Check
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	430a      	orrs	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>7)&1){ // if it is true ,user push the '4';
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <Process_C1_Check_Function+0xd4>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	09db      	lsrs	r3, r3, #7
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	d004      	beq.n	8000716 <Process_C1_Check_Function+0x62>
				i=520;//Set frequency 520Hz
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <Process_C1_Check_Function+0xd8>)
 800070e:	2282      	movs	r2, #130	; 0x82
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	801a      	strh	r2, [r3, #0]
}
 8000714:	e035      	b.n	8000782 <Process_C1_Check_Function+0xce>
				GPIOA->ODR &=  ~(1U <<7);// user dont push '4'	(R2)
 8000716:	23a0      	movs	r3, #160	; 0xa0
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	438a      	bics	r2, r1
 8000724:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<9);  //R3 Check  PA4
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0089      	lsls	r1, r1, #2
 8000734:	430a      	orrs	r2, r1
 8000736:	615a      	str	r2, [r3, #20]
				if((GPIOB->IDR>>7)&1){ // if it is true ,user push the '7';
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <Process_C1_Check_Function+0xd4>)
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	09db      	lsrs	r3, r3, #7
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	d004      	beq.n	800074e <Process_C1_Check_Function+0x9a>
					i=720;//Set frequency 720Hz
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <Process_C1_Check_Function+0xd8>)
 8000746:	22b4      	movs	r2, #180	; 0xb4
 8000748:	0092      	lsls	r2, r2, #2
 800074a:	801a      	strh	r2, [r3, #0]
}
 800074c:	e019      	b.n	8000782 <Process_C1_Check_Function+0xce>
					GPIOA->ODR &=  ~(1U <<9);// user dont push '7'	(PA4)
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	490e      	ldr	r1, [pc, #56]	; (8000794 <Process_C1_Check_Function+0xe0>)
 800075a:	400a      	ands	r2, r1
 800075c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |=(1<<10);  //R4 Check
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	23a0      	movs	r3, #160	; 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	00c9      	lsls	r1, r1, #3
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
					if((GPIOB->IDR>>7)&1){ // if it is true ,user push the '*'; //rest
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <Process_C1_Check_Function+0xd4>)
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	09db      	lsrs	r3, r3, #7
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	d002      	beq.n	8000782 <Process_C1_Check_Function+0xce>
						i=0;  //Set frequency 0Hz (Silent mode)
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <Process_C1_Check_Function+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	50000400 	.word	0x50000400
 800078c:	2000001c 	.word	0x2000001c
 8000790:	ffffefff 	.word	0xffffefff
 8000794:	fffffdff 	.word	0xfffffdff

08000798 <Process_C2_Check_Function>:
void Process_C2_Check_Function(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<12);  //R1 Check
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0149      	lsls	r1, r1, #5
 80007aa:	430a      	orrs	r2, r1
 80007ac:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR>>8)&1){ // if it is true ,user push the '2';
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <Process_C2_Check_Function+0xd8>)
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	2201      	movs	r2, #1
 80007b6:	4013      	ands	r3, r2
 80007b8:	d004      	beq.n	80007c4 <Process_C2_Check_Function+0x2c>
		i=480;//Set frequency 480Hz
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <Process_C2_Check_Function+0xdc>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	801a      	strh	r2, [r3, #0]
					}

			}

		}
}
 80007c2:	e051      	b.n	8000868 <Process_C2_Check_Function+0xd0>
			GPIOA->ODR &=  ~(1U <<12);// user dont push '2' (R1)
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	492a      	ldr	r1, [pc, #168]	; (8000878 <Process_C2_Check_Function+0xe0>)
 80007d0:	400a      	ands	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<7);  //R2 Check
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>8)&1){ // if it is true ,user push the '5';
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <Process_C2_Check_Function+0xd8>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	d004      	beq.n	80007fa <Process_C2_Check_Function+0x62>
				i=640;//Set frequency 640Hz
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <Process_C2_Check_Function+0xdc>)
 80007f2:	22a0      	movs	r2, #160	; 0xa0
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	e036      	b.n	8000868 <Process_C2_Check_Function+0xd0>
					GPIOA->ODR &=  ~(1U <<7);// user dont push '5'	(R2)
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	438a      	bics	r2, r1
 8000808:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |=(1<<9);  //R3 Check  PA4
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0089      	lsls	r1, r1, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
					if((GPIOB->IDR>>8)&1){ // if it is true ,user push the '8';
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Process_C2_Check_Function+0xd8>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	d004      	beq.n	8000832 <Process_C2_Check_Function+0x9a>
						i=760;//Set frequency 760Hz
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <Process_C2_Check_Function+0xdc>)
 800082a:	22be      	movs	r2, #190	; 0xbe
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	801a      	strh	r2, [r3, #0]
}
 8000830:	e01a      	b.n	8000868 <Process_C2_Check_Function+0xd0>
						GPIOA->ODR &=  ~(1U <<9);// user dont push '8'	(PA4)
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	490f      	ldr	r1, [pc, #60]	; (800087c <Process_C2_Check_Function+0xe4>)
 800083e:	400a      	ands	r2, r1
 8000840:	615a      	str	r2, [r3, #20]
						GPIOA->ODR |=(1<<10);  //R4 Check
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	23a0      	movs	r3, #160	; 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	00c9      	lsls	r1, r1, #3
 8000850:	430a      	orrs	r2, r1
 8000852:	615a      	str	r2, [r3, #20]
						if((GPIOB->IDR>>8)&1){ // if it is true ,user push the '0';
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <Process_C2_Check_Function+0xd8>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	d003      	beq.n	8000868 <Process_C2_Check_Function+0xd0>
							i=1640;//Set frequency 1640Hz
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <Process_C2_Check_Function+0xdc>)
 8000862:	22cd      	movs	r2, #205	; 0xcd
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	801a      	strh	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	50000400 	.word	0x50000400
 8000874:	2000001c 	.word	0x2000001c
 8000878:	ffffefff 	.word	0xffffefff
 800087c:	fffffdff 	.word	0xfffffdff

08000880 <Process_C3_Check_Function>:
void Process_C3_Check_Function(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<12);  //R1 Check
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	0149      	lsls	r1, r1, #5
 8000892:	430a      	orrs	r2, r1
 8000894:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR>>9)&1){ // if it is true ,user push the '3';
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <Process_C3_Check_Function+0xd8>)
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	0a5b      	lsrs	r3, r3, #9
 800089c:	2201      	movs	r2, #1
 800089e:	4013      	ands	r3, r2
 80008a0:	d004      	beq.n	80008ac <Process_C3_Check_Function+0x2c>
		i=660;//Set frequency 660Hz
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <Process_C3_Check_Function+0xdc>)
 80008a4:	22a5      	movs	r2, #165	; 0xa5
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	801a      	strh	r2, [r3, #0]

			}

	}

}
 80008aa:	e051      	b.n	8000950 <Process_C3_Check_Function+0xd0>
			GPIOA->ODR &=  ~(1U <<12);// user dont push '3' (R1)
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	23a0      	movs	r3, #160	; 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	492a      	ldr	r1, [pc, #168]	; (8000960 <Process_C3_Check_Function+0xe0>)
 80008b8:	400a      	ands	r2, r1
 80008ba:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<7);  //R2 Check
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>9)&1){ // if it is true ,user push the '6';
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <Process_C3_Check_Function+0xd8>)
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	0a5b      	lsrs	r3, r3, #9
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	d004      	beq.n	80008e2 <Process_C3_Check_Function+0x62>
				i=680;//Set frequency 680Hz
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <Process_C3_Check_Function+0xdc>)
 80008da:	22aa      	movs	r2, #170	; 0xaa
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	801a      	strh	r2, [r3, #0]
}
 80008e0:	e036      	b.n	8000950 <Process_C3_Check_Function+0xd0>
						GPIOA->ODR &=  ~(1U <<7);// user dont push '6'	(R2)
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	23a0      	movs	r3, #160	; 0xa0
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	438a      	bics	r2, r1
 80008f0:	615a      	str	r2, [r3, #20]
						GPIOA->ODR |=(1<<9);  //R3 Check  PA4
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0089      	lsls	r1, r1, #2
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
						if((GPIOB->IDR>>9)&1){ // if it is true ,user push the '9';
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <Process_C3_Check_Function+0xd8>)
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	0a5b      	lsrs	r3, r3, #9
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	d004      	beq.n	800091a <Process_C3_Check_Function+0x9a>
							i=800;//Set frequency 800Hz
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <Process_C3_Check_Function+0xdc>)
 8000912:	22c8      	movs	r2, #200	; 0xc8
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	801a      	strh	r2, [r3, #0]
}
 8000918:	e01a      	b.n	8000950 <Process_C3_Check_Function+0xd0>
								GPIOA->ODR &=  ~(1U <<9);// user dont push '9'	(PA4)
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	490f      	ldr	r1, [pc, #60]	; (8000964 <Process_C3_Check_Function+0xe4>)
 8000926:	400a      	ands	r2, r1
 8000928:	615a      	str	r2, [r3, #20]
								GPIOA->ODR |=(1<<10);  //R4 Check
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	00c9      	lsls	r1, r1, #3
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
								if((GPIOB->IDR>>9)&1){ // if it is true
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <Process_C3_Check_Function+0xd8>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	0a5b      	lsrs	r3, r3, #9
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	d003      	beq.n	8000950 <Process_C3_Check_Function+0xd0>
									i=16000; // max value of frequency
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <Process_C3_Check_Function+0xdc>)
 800094a:	22fa      	movs	r2, #250	; 0xfa
 800094c:	0192      	lsls	r2, r2, #6
 800094e:	801a      	strh	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	50000400 	.word	0x50000400
 800095c:	2000001c 	.word	0x2000001c
 8000960:	ffffefff 	.word	0xffffefff
 8000964:	fffffdff 	.word	0xfffffdff

08000968 <Process_C4_Check_Function>:
void Process_C4_Check_Function(){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<12);  //R1 Check
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	23a0      	movs	r3, #160	; 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	0149      	lsls	r1, r1, #5
 800097a:	430a      	orrs	r2, r1
 800097c:	615a      	str	r2, [r3, #20]
	if((GPIOA->IDR>>15)&1){ // if it is true ,user push the 'A'; //
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	0bdb      	lsrs	r3, r3, #15
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	d004      	beq.n	8000996 <Process_C4_Check_Function+0x2e>
			i=1000;//Set frequency 1000Hz
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <Process_C4_Check_Function+0xdc>)
 800098e:	22fa      	movs	r2, #250	; 0xfa
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	801a      	strh	r2, [r3, #0]
			}

		}


}
 8000994:	e053      	b.n	8000a3e <Process_C4_Check_Function+0xd6>
			GPIOA->ODR &=  ~(1U <<12);// user dont push 'A' (R1)
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	4929      	ldr	r1, [pc, #164]	; (8000a48 <Process_C4_Check_Function+0xe0>)
 80009a2:	400a      	ands	r2, r1
 80009a4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<7);  //R2 Check
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	430a      	orrs	r2, r1
 80009b4:	615a      	str	r2, [r3, #20]
			if((GPIOA->IDR>>15)&1){ // if it is true ,user push the 'B';
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	0bdb      	lsrs	r3, r3, #15
 80009be:	2201      	movs	r2, #1
 80009c0:	4013      	ands	r3, r2
 80009c2:	d004      	beq.n	80009ce <Process_C4_Check_Function+0x66>
				i=2000;//Set frequency 2000Hz
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <Process_C4_Check_Function+0xdc>)
 80009c6:	22fa      	movs	r2, #250	; 0xfa
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	801a      	strh	r2, [r3, #0]
}
 80009cc:	e037      	b.n	8000a3e <Process_C4_Check_Function+0xd6>
				GPIOA->ODR &=  ~(1U <<7);// user dont push 'B'	(R2)
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	23a0      	movs	r3, #160	; 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	438a      	bics	r2, r1
 80009dc:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<9);  //R3 Check  PA4
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0089      	lsls	r1, r1, #2
 80009ec:	430a      	orrs	r2, r1
 80009ee:	615a      	str	r2, [r3, #20]
				if((GPIOA->IDR>>15)&1){ // if it is true ,user push the 'C';
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	0bdb      	lsrs	r3, r3, #15
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	d003      	beq.n	8000a06 <Process_C4_Check_Function+0x9e>
					i=3000;//Set frequency 3000Hz
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <Process_C4_Check_Function+0xdc>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <Process_C4_Check_Function+0xe4>)
 8000a02:	801a      	strh	r2, [r3, #0]
}
 8000a04:	e01b      	b.n	8000a3e <Process_C4_Check_Function+0xd6>
					GPIOA->ODR &=  ~(1U <<9);// user dont push 'C'	(PA4)
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	23a0      	movs	r3, #160	; 0xa0
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <Process_C4_Check_Function+0xe8>)
 8000a12:	400a      	ands	r2, r1
 8000a14:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |=(1<<10);  //R4 Check
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	00c9      	lsls	r1, r1, #3
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
					if((GPIOA->IDR>>15)&1){ // if it is true ,user push the 'D';
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	0bdb      	lsrs	r3, r3, #15
 8000a30:	2201      	movs	r2, #1
 8000a32:	4013      	ands	r3, r2
 8000a34:	d003      	beq.n	8000a3e <Process_C4_Check_Function+0xd6>
						i=8000;//Set frequency 8000Hz
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <Process_C4_Check_Function+0xdc>)
 8000a38:	22fa      	movs	r2, #250	; 0xfa
 8000a3a:	0152      	lsls	r2, r2, #5
 8000a3c:	801a      	strh	r2, [r3, #0]
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000001c 	.word	0x2000001c
 8000a48:	ffffefff 	.word	0xffffefff
 8000a4c:	00000bb8 	.word	0x00000bb8
 8000a50:	fffffdff 	.word	0xfffffdff

08000a54 <Display_Number>:

		Delay(500);
		System_D4();
		Display_Number(12);
}
void Display_Number(int a){// a is our digit,this if-else statement ,for display digit
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	if(a==0)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <Display_Number+0x14>
		System_Number0();
 8000a62:	f000 f9a5 	bl	8000db0 <System_Number0>
			System_Number8();
	else if (a==9)
				System_Number9();


}
 8000a66:	e034      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d102      	bne.n	8000a74 <Display_Number+0x20>
		System_Number1();
 8000a6e:	f000 f945 	bl	8000cfc <System_Number1>
}
 8000a72:	e02e      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d102      	bne.n	8000a80 <Display_Number+0x2c>
			System_Number2();
 8000a7a:	f000 f949 	bl	8000d10 <System_Number2>
}
 8000a7e:	e028      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d102      	bne.n	8000a8c <Display_Number+0x38>
			System_Number3();
 8000a86:	f000 f94d 	bl	8000d24 <System_Number3>
}
 8000a8a:	e022      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==4)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	d102      	bne.n	8000a98 <Display_Number+0x44>
			System_Number4();
 8000a92:	f000 f951 	bl	8000d38 <System_Number4>
}
 8000a96:	e01c      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==5)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d102      	bne.n	8000aa4 <Display_Number+0x50>
			System_Number5();
 8000a9e:	f000 f955 	bl	8000d4c <System_Number5>
}
 8000aa2:	e016      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==6)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d102      	bne.n	8000ab0 <Display_Number+0x5c>
			System_Number6();
 8000aaa:	f000 f959 	bl	8000d60 <System_Number6>
}
 8000aae:	e010      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==7)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d102      	bne.n	8000abc <Display_Number+0x68>
			System_Number7();
 8000ab6:	f000 f95d 	bl	8000d74 <System_Number7>
}
 8000aba:	e00a      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==8)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d102      	bne.n	8000ac8 <Display_Number+0x74>
			System_Number8();
 8000ac2:	f000 f961 	bl	8000d88 <System_Number8>
}
 8000ac6:	e004      	b.n	8000ad2 <Display_Number+0x7e>
	else if (a==9)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	d101      	bne.n	8000ad2 <Display_Number+0x7e>
				System_Number9();
 8000ace:	f000 f965 	bl	8000d9c <System_Number9>
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <Number_Find>:


void Number_Find(uint32_t number){// this function find the number's digit
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b088      	sub	sp, #32
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	uint32_t binler,yuzler,onlar;
	uint32_t number_t;
	for(int j=0;j<2;j++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	e054      	b.n	8000b92 <Number_Find+0xb8>
		number_t=number;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	61bb      	str	r3, [r7, #24]
		//number_t=number_t%0;
		binler=(number_t/1000);
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	0099      	lsls	r1, r3, #2
 8000af2:	0010      	movs	r0, r2
 8000af4:	f7ff fb06 	bl	8000104 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	617b      	str	r3, [r7, #20]

		Delay(30);
 8000afc:	201e      	movs	r0, #30
 8000afe:	f000 fb91 	bl	8001224 <Delay>
		System_D1();
 8000b02:	f000 f95f 	bl	8000dc4 <System_D1>

		Display_Number(binler);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ffa3 	bl	8000a54 <Display_Number>

		number_t=number%1000; // find hunders digits
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	23fa      	movs	r3, #250	; 0xfa
 8000b12:	0099      	lsls	r1, r3, #2
 8000b14:	0010      	movs	r0, r2
 8000b16:	f7ff fb7b 	bl	8000210 <__aeabi_uidivmod>
 8000b1a:	000b      	movs	r3, r1
 8000b1c:	61bb      	str	r3, [r7, #24]
		yuzler=(number_t /100);
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2164      	movs	r1, #100	; 0x64
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff faee 	bl	8000104 <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	613b      	str	r3, [r7, #16]

		Delay(30);
 8000b2c:	201e      	movs	r0, #30
 8000b2e:	f000 fb79 	bl	8001224 <Delay>
		System_D2();
 8000b32:	f000 f96c 	bl	8000e0e <System_D2>
		Display_Number(yuzler);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff8b 	bl	8000a54 <Display_Number>

		number_t=number_t%100;  // find tens digits
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2164      	movs	r1, #100	; 0x64
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff fb64 	bl	8000210 <__aeabi_uidivmod>
 8000b48:	000b      	movs	r3, r1
 8000b4a:	61bb      	str	r3, [r7, #24]
		onlar=number_t/10;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	210a      	movs	r1, #10
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fad7 	bl	8000104 <__udivsi3>
 8000b56:	0003      	movs	r3, r0
 8000b58:	60fb      	str	r3, [r7, #12]

		Delay(30);
 8000b5a:	201e      	movs	r0, #30
 8000b5c:	f000 fb62 	bl	8001224 <Delay>
		System_D3();
 8000b60:	f000 f97a 	bl	8000e58 <System_D3>
		Display_Number(onlar);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff74 	bl	8000a54 <Display_Number>

		number_t=number_t%10;  // find ones digits
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	210a      	movs	r1, #10
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fb4d 	bl	8000210 <__aeabi_uidivmod>
 8000b76:	000b      	movs	r3, r1
 8000b78:	61bb      	str	r3, [r7, #24]

		Delay(30);
 8000b7a:	201e      	movs	r0, #30
 8000b7c:	f000 fb52 	bl	8001224 <Delay>
		System_D4();
 8000b80:	f000 f98f 	bl	8000ea2 <System_D4>
		Display_Number(number_t);
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff ff64 	bl	8000a54 <Display_Number>
	for(int j=0;j<2;j++){
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	dda7      	ble.n	8000ae8 <Number_Find+0xe>

	}
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b008      	add	sp, #32
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <System_Segment_Init>:
void System_Segment_Init(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	 RCC->IOPENR |= (3U << 0); // GPIOA and GPIOB clock enable
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <System_Segment_Init+0x148>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <System_Segment_Init+0x148>)
 8000baa:	2103      	movs	r1, #3
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34

	 GPIOA->MODER &=  ~(3U<<2*0); //pa0
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2103      	movs	r1, #3
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1U<<0);
 8000bc0:	23a0      	movs	r3, #160	; 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	2101      	movs	r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]


	 GPIOA->MODER &=  ~(3U <<2*1); //pa1  as output
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	210c      	movs	r1, #12
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2);
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	2104      	movs	r1, #4
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*4); //pa4  as output
 8000bf0:	23a0      	movs	r3, #160	; 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	493c      	ldr	r1, [pc, #240]	; (8000cec <System_Segment_Init+0x14c>)
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 8);
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0049      	lsls	r1, r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*5); //pa5  as output
 8000c12:	23a0      	movs	r3, #160	; 0xa0
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	4934      	ldr	r1, [pc, #208]	; (8000cf0 <System_Segment_Init+0x150>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 10);
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	00c9      	lsls	r1, r1, #3
 8000c30:	430a      	orrs	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
	 //GPIOA->MODER |=  (1 << 2*6);

	// GPIOA->MODER &=  ~(3U <<2*11); //pa11  as output
	// GPIOA->MODER |=  (1 << 2*11);

	 GPIOB->MODER &=  ~(3U << 0); //pB0  output
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	438a      	bics	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 0);
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U << 2*1); //pB1  output
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c52:	210c      	movs	r1, #12
 8000c54:	438a      	bics	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 2);
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c5e:	2104      	movs	r1, #4
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U << 2*2); //pB2  output
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c6a:	2130      	movs	r1, #48	; 0x30
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 4);
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c76:	2110      	movs	r1, #16
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 3); //pB3  output
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c82:	21c0      	movs	r1, #192	; 0xc0
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 6);
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	430a      	orrs	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 4); //pB4  output
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <System_Segment_Init+0x154>)
 8000c9a:	4914      	ldr	r1, [pc, #80]	; (8000cec <System_Segment_Init+0x14c>)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 8);
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <System_Segment_Init+0x154>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <System_Segment_Init+0x154>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0049      	lsls	r1, r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 5); //pB5  output
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cb4:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <System_Segment_Init+0x150>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 10);
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	00c9      	lsls	r1, r1, #3
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 6); //pB6  output
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cce:	490a      	ldr	r1, [pc, #40]	; (8000cf8 <System_Segment_Init+0x158>)
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 12);
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <System_Segment_Init+0x154>)
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	0149      	lsls	r1, r1, #5
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	fffffcff 	.word	0xfffffcff
 8000cf0:	fffff3ff 	.word	0xfffff3ff
 8000cf4:	50000400 	.word	0x50000400
 8000cf8:	ffffcfff 	.word	0xffffcfff

08000cfc <System_Number1>:


void System_Number1(){// for number 1
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x79  ;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <System_Number1+0x10>)
 8000d02:	2279      	movs	r2, #121	; 0x79
 8000d04:	615a      	str	r2, [r3, #20]
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50000400 	.word	0x50000400

08000d10 <System_Number2>:
void System_Number2(){// for number 2
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xA4  ;
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <System_Number2+0x10>)
 8000d16:	22a4      	movs	r2, #164	; 0xa4
 8000d18:	615a      	str	r2, [r3, #20]
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50000400 	.word	0x50000400

08000d24 <System_Number3>:
void System_Number3(){// for number 3
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xB0  ;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <System_Number3+0x10>)
 8000d2a:	22b0      	movs	r2, #176	; 0xb0
 8000d2c:	615a      	str	r2, [r3, #20]
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	50000400 	.word	0x50000400

08000d38 <System_Number4>:
void System_Number4(){// for number 4
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x99  ;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <System_Number4+0x10>)
 8000d3e:	2299      	movs	r2, #153	; 0x99
 8000d40:	615a      	str	r2, [r3, #20]
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50000400 	.word	0x50000400

08000d4c <System_Number5>:
void System_Number5(){// for number 5
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x92  ;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <System_Number5+0x10>)
 8000d52:	2292      	movs	r2, #146	; 0x92
 8000d54:	615a      	str	r2, [r3, #20]
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	50000400 	.word	0x50000400

08000d60 <System_Number6>:
void System_Number6(){// for number 6
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x2  ;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <System_Number6+0x10>)
 8000d66:	2202      	movs	r2, #2
 8000d68:	615a      	str	r2, [r3, #20]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	50000400 	.word	0x50000400

08000d74 <System_Number7>:
void System_Number7(){// for number 7
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xF8  ;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <System_Number7+0x10>)
 8000d7a:	22f8      	movs	r2, #248	; 0xf8
 8000d7c:	615a      	str	r2, [r3, #20]
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	50000400 	.word	0x50000400

08000d88 <System_Number8>:
void System_Number8(){// for number 8
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	GPIOB->ODR =0  ;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <System_Number8+0x10>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	50000400 	.word	0x50000400

08000d9c <System_Number9>:
void System_Number9(){// for number 9
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x90  ;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <System_Number9+0x10>)
 8000da2:	2290      	movs	r2, #144	; 0x90
 8000da4:	615a      	str	r2, [r3, #20]
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50000400 	.word	0x50000400

08000db0 <System_Number0>:
void System_Number0(){// for number 0
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x40  ;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <System_Number0+0x10>)
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	615a      	str	r2, [r3, #20]
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	50000400 	.word	0x50000400

08000dc4 <System_D1>:


void System_D1(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<0); //pa0 (1)
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	695a      	ldr	r2, [r3, #20]
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<1);
 8000dd8:	23a0      	movs	r3, #160	; 0xa0
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	2102      	movs	r1, #2
 8000de4:	438a      	bics	r2, r1
 8000de6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<4);
 8000de8:	23a0      	movs	r3, #160	; 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2110      	movs	r1, #16
 8000df4:	438a      	bics	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<5);
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	2120      	movs	r1, #32
 8000e04:	438a      	bics	r2, r1
 8000e06:	615a      	str	r2, [r3, #20]
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <System_D2>:
void System_D2(){
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<1); //PA1  (2)
 8000e12:	23a0      	movs	r3, #160	; 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<0);
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	438a      	bics	r2, r1
 8000e30:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<4);
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	438a      	bics	r2, r1
 8000e40:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<5);
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	23a0      	movs	r3, #160	; 0xa0
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	438a      	bics	r2, r1
 8000e50:	615a      	str	r2, [r3, #20]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <System_D3>:
void System_D3(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<4) ; //PA4   (16)
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2110      	movs	r1, #16
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<1);
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2102      	movs	r1, #2
 8000e78:	438a      	bics	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<0);
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2101      	movs	r1, #1
 8000e88:	438a      	bics	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<5);
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2120      	movs	r1, #32
 8000e98:	438a      	bics	r2, r1
 8000e9a:	615a      	str	r2, [r3, #20]
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <System_D4>:
void System_D4(){
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1<<5) ; //PA5    (32)
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<1);
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	23a0      	movs	r3, #160	; 0xa0
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<4);
 8000ec6:	23a0      	movs	r3, #160	; 0xa0
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U <<0);
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	695a      	ldr	r2, [r3, #20]
 8000edc:	23a0      	movs	r3, #160	; 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	615a      	str	r2, [r3, #20]
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <__NVIC_EnableIRQ>:
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b7f      	cmp	r3, #127	; 0x7f
 8000efe:	d809      	bhi.n	8000f14 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001a      	movs	r2, r3
 8000f06:	231f      	movs	r3, #31
 8000f08:	401a      	ands	r2, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_EnableIRQ+0x30>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4091      	lsls	r1, r2
 8000f10:	000a      	movs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b7f      	cmp	r3, #127	; 0x7f
 8000f34:	d828      	bhi.n	8000f88 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f36:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <__NVIC_SetPriority+0xd4>)
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	33c0      	adds	r3, #192	; 0xc0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	589b      	ldr	r3, [r3, r2]
 8000f46:	1dfa      	adds	r2, r7, #7
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	400a      	ands	r2, r1
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	401a      	ands	r2, r3
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	4003      	ands	r3, r0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <__NVIC_SetPriority+0xd4>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	33c0      	adds	r3, #192	; 0xc0
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	501a      	str	r2, [r3, r0]
}
 8000f86:	e031      	b.n	8000fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <__NVIC_SetPriority+0xd8>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0019      	movs	r1, r3
 8000f90:	230f      	movs	r3, #15
 8000f92:	400b      	ands	r3, r1
 8000f94:	3b08      	subs	r3, #8
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3306      	adds	r3, #6
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	2203      	movs	r2, #3
 8000faa:	400a      	ands	r2, r1
 8000fac:	00d2      	lsls	r2, r2, #3
 8000fae:	21ff      	movs	r1, #255	; 0xff
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2303      	movs	r3, #3
 8000fca:	4003      	ands	r3, r0
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <__NVIC_SetPriority+0xd8>)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4023      	ands	r3, r4
 8000fdc:	3b08      	subs	r3, #8
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	3306      	adds	r3, #6
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	18c3      	adds	r3, r0, r3
 8000fe8:	3304      	adds	r3, #4
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b003      	add	sp, #12
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <System_Init>:
#include "Process.h"
#include "SSD.h"



void System_Init(){// all initialize are this function
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	//SystemCoreClockUpdate(); // update
    System_Alternate_LED_Init();   // led initialize
 8001000:	f000 f8dc 	bl	80011bc <System_Alternate_LED_Init>

	System_Timer_Init();  // timer3 initialize for pwm
 8001004:	f000 f806 	bl	8001014 <System_Timer_Init>
	System_Timer2_Init(); // timer 2 initialize
 8001008:	f000 f868 	bl	80010dc <System_Timer2_Init>
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <System_Timer_Init>:

void System_Timer_Init(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
		RCC->APBENR1 |=(1U<<1); // timer3 clock is enabled
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <System_Timer_Init+0xbc>)
 800101a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <System_Timer_Init+0xbc>)
 800101e:	2102      	movs	r1, #2
 8001020:	430a      	orrs	r2, r1
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
		//RCC->APBENR2 |=(1U<<11); // timer1 clock is enabled
		TIM3->CR1=0;
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <System_Timer_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		TIM3->CR1 |=(1<<7); // arpe bit set
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <System_Timer_Init+0xc0>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <System_Timer_Init+0xc0>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
		TIM3->CNT =0;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <System_Timer_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->PSC=100;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <System_Timer_Init+0xc0>)
 800103e:	2264      	movs	r2, #100	; 0x64
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR=(16000); // every 10 ms ,timer come 16000*1000
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <System_Timer_Init+0xc0>)
 8001044:	22fa      	movs	r2, #250	; 0xfa
 8001046:	0192      	lsls	r2, r2, #6
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->DIER |=(1<<0); // enable interrupts
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <System_Timer_Init+0xc0>)
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <System_Timer_Init+0xc0>)
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	60da      	str	r2, [r3, #12]

		TIM3->CCMR1 |=(1<<3); // output compare preload enable
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <System_Timer_Init+0xc0>)
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <System_Timer_Init+0xc0>)
 800105c:	2108      	movs	r1, #8
 800105e:	430a      	orrs	r2, r1
 8001060:	619a      	str	r2, [r3, #24]

		TIM3->CCMR1 &= ~ (1u<<16); //0
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <System_Timer_Init+0xc0>)
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <System_Timer_Init+0xc0>)
 8001068:	491b      	ldr	r1, [pc, #108]	; (80010d8 <System_Timer_Init+0xc4>)
 800106a:	400a      	ands	r2, r1
 800106c:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |=(1u<<6); //1
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <System_Timer_Init+0xc0>)
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <System_Timer_Init+0xc0>)
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	430a      	orrs	r2, r1
 8001078:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 |= (1u<<5); //1
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <System_Timer_Init+0xc0>)
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <System_Timer_Init+0xc0>)
 8001080:	2120      	movs	r1, #32
 8001082:	430a      	orrs	r2, r1
 8001084:	619a      	str	r2, [r3, #24]
		TIM3->CCMR1 &= ~(1u<<4);  // 0
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <System_Timer_Init+0xc0>)
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <System_Timer_Init+0xc0>)
 800108c:	2110      	movs	r1, #16
 800108e:	438a      	bics	r2, r1
 8001090:	619a      	str	r2, [r3, #24]

		TIM3->CCER |=(1<<0);// (capture compare 1) enable
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <System_Timer_Init+0xc0>)
 8001094:	6a1a      	ldr	r2, [r3, #32]
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <System_Timer_Init+0xc0>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	621a      	str	r2, [r3, #32]


		TIM3->CCR1 =0x84; // old value 255
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <System_Timer_Init+0xc0>)
 80010a0:	2284      	movs	r2, #132	; 0x84
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34

		//TIM3->AF1 |=(1<<14); //TİM3 af1 register ertsel comp1 output(?)
		TIM3->EGR |= (1<<0); // update genration
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <System_Timer_Init+0xc0>)
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <System_Timer_Init+0xc0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
		TIM3->CR1 |= (1<<0);
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <System_Timer_Init+0xc0>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <System_Timer_Init+0xc0>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

		NVIC_SetPriority(TIM3_IRQn,2);
 80010bc:	2102      	movs	r1, #2
 80010be:	2010      	movs	r0, #16
 80010c0:	f7ff ff2e 	bl	8000f20 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM3_IRQn);
 80010c4:	2010      	movs	r0, #16
 80010c6:	f7ff ff11 	bl	8000eec <__NVIC_EnableIRQ>

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40000400 	.word	0x40000400
 80010d8:	fffeffff 	.word	0xfffeffff

080010dc <System_Timer2_Init>:
void System_Timer2_Init(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
		RCC->APBENR1 |=(1U<<0); // timer2 clock is enabled
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <System_Timer2_Init+0x68>)
 80010e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <System_Timer2_Init+0x68>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CR1=0;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
		//TIM2->CR1 |=(1<<7); // arpe bit set
		TIM2->CNT =0;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->PSC=0;
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
		TIM2->ARR=(8000); //8Hz
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	22fa      	movs	r2, #250	; 0xfa
 800110a:	0152      	lsls	r2, r2, #5
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->DIER |=(1<<0); // enable interrupts
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2101      	movs	r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
		TIM2->CR1 |= (1<<0);
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

		NVIC_SetPriority(TIM2_IRQn,1);
 800112e:	2101      	movs	r1, #1
 8001130:	200f      	movs	r0, #15
 8001132:	f7ff fef5 	bl	8000f20 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM2_IRQn);
 8001136:	200f      	movs	r0, #15
 8001138:	f7ff fed8 	bl	8000eec <__NVIC_EnableIRQ>

}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40021000 	.word	0x40021000

08001148 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

	//TIM3->ARR =i;
	TIM3->SR &=  ~(1U<<0); // update sr registers
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <TIM3_IRQHandler+0x18>)
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <TIM3_IRQHandler+0x18>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	611a      	str	r2, [r3, #16]
	//Delay(50);
	//Number_Find(i);
	//Delay(50);
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40000400 	.word	0x40000400

08001164 <TIM2_IRQHandler>:
void TIM2_IRQHandler(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	*/

	//


	TIM3->ARR=i;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <TIM2_IRQHandler+0x50>)
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <TIM2_IRQHandler+0x54>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->EGR |=(1<<0);// update generation
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <TIM2_IRQHandler+0x54>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <TIM2_IRQHandler+0x54>)
 8001176:	2101      	movs	r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	615a      	str	r2, [r3, #20]

	TIM2->EGR |=(1<<0);
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
	TIM2->SR &=  ~(1U<<0); // update sr registers
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	2101      	movs	r1, #1
 8001198:	438a      	bics	r2, r1
 800119a:	611a      	str	r2, [r3, #16]
	TIM2->SR &=  ~(1U<<1);
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2102      	movs	r1, #2
 80011a8:	438a      	bics	r2, r1
 80011aa:	611a      	str	r2, [r3, #16]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	2000001c 	.word	0x2000001c
 80011b8:	40000400 	.word	0x40000400

080011bc <System_Alternate_LED_Init>:



void System_Alternate_LED_Init(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	 /* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <System_Alternate_LED_Init+0x5c>)
 80011c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <System_Alternate_LED_Init+0x5c>)
 80011c6:	2103      	movs	r1, #3
 80011c8:	430a      	orrs	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
	 /* Setup PA6 as alternate function */

		GPIOA->MODER &= ~(3U << 2*6);  //PA6 RESET
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	4911      	ldr	r1, [pc, #68]	; (800121c <System_Alternate_LED_Init+0x60>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |=  (2<< 2*6) ;  //PA6 SET AS alternate function 10
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	0189      	lsls	r1, r1, #6
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

		GPIOA->AFR[0]  &= ~(0xFU<<4*6);  //af1... reset
 80011ee:	23a0      	movs	r3, #160	; 0xa0
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	23a0      	movs	r3, #160	; 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	4909      	ldr	r1, [pc, #36]	; (8001220 <System_Alternate_LED_Init+0x64>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0]  |=  (1<<4*6);//pa6 af1
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	23a0      	movs	r3, #160	; 0xa0
 8001206:	05db      	lsls	r3, r3, #23
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	0449      	lsls	r1, r1, #17
 800120c:	430a      	orrs	r2, r1
 800120e:	621a      	str	r2, [r3, #32]

}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000
 800121c:	ffffcfff 	.word	0xffffcfff
 8001220:	f0ffffff 	.word	0xf0ffffff

08001224 <Delay>:

void Delay(volatile uint32_t s) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 800122c:	e002      	b.n	8001234 <Delay+0x10>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3b01      	subs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <Delay+0xa>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <main>:
#include "Keypad.h"
#include  "Process.h"
#include "SSD.h"


int main(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	/*All initializes */
	System_Init();
 8001248:	f7ff fed8 	bl	8000ffc <System_Init>
	Keypad_Library_Init();
 800124c:	f7ff f86e 	bl	800032c <Keypad_Library_Init>
	System_Keypad_Set();
 8001250:	f7ff f8d0 	bl	80003f4 <System_Keypad_Set>
	System_Segment_Init();
 8001254:	f7ff fca4 	bl	8000ba0 <System_Segment_Init>
    while(1) {

    	Delay(200);
 8001258:	20c8      	movs	r0, #200	; 0xc8
 800125a:	f7ff ffe3 	bl	8001224 <Delay>
    	Number_Find(i); // Display frequency
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <main+0x2c>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fc39 	bl	8000ada <Number_Find>
    	Delay(200);
 8001268:	20c8      	movs	r0, #200	; 0xc8
 800126a:	f7ff ffdb 	bl	8001224 <Delay>
    	Delay(200);
 800126e:	e7f3      	b.n	8001258 <main+0x14>
 8001270:	2000001c 	.word	0x2000001c

08001274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001276:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001278:	f000 f826 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	; (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012a2:	f000 f81d 	bl	80012e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a6:	f7ff ffcd 	bl	8001244 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   r0, =_estack
 80012ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80012b8:	08001348 	.word	0x08001348
  ldr r2, =_sbss
 80012bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80012c0:	20000020 	.word	0x20000020

080012c4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_COMP_IRQHandler>
	...

080012c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <SystemInit+0x14>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	0512      	lsls	r2, r2, #20
 80012d2:	609a      	str	r2, [r3, #8]
#endif
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__libc_init_array>:
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	2600      	movs	r6, #0
 80012e4:	4d0c      	ldr	r5, [pc, #48]	; (8001318 <__libc_init_array+0x38>)
 80012e6:	4c0d      	ldr	r4, [pc, #52]	; (800131c <__libc_init_array+0x3c>)
 80012e8:	1b64      	subs	r4, r4, r5
 80012ea:	10a4      	asrs	r4, r4, #2
 80012ec:	42a6      	cmp	r6, r4
 80012ee:	d109      	bne.n	8001304 <__libc_init_array+0x24>
 80012f0:	2600      	movs	r6, #0
 80012f2:	f000 f819 	bl	8001328 <_init>
 80012f6:	4d0a      	ldr	r5, [pc, #40]	; (8001320 <__libc_init_array+0x40>)
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <__libc_init_array+0x44>)
 80012fa:	1b64      	subs	r4, r4, r5
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	42a6      	cmp	r6, r4
 8001300:	d105      	bne.n	800130e <__libc_init_array+0x2e>
 8001302:	bd70      	pop	{r4, r5, r6, pc}
 8001304:	00b3      	lsls	r3, r6, #2
 8001306:	58eb      	ldr	r3, [r5, r3]
 8001308:	4798      	blx	r3
 800130a:	3601      	adds	r6, #1
 800130c:	e7ee      	b.n	80012ec <__libc_init_array+0xc>
 800130e:	00b3      	lsls	r3, r6, #2
 8001310:	58eb      	ldr	r3, [r5, r3]
 8001312:	4798      	blx	r3
 8001314:	3601      	adds	r6, #1
 8001316:	e7f2      	b.n	80012fe <__libc_init_array+0x1e>
 8001318:	08001340 	.word	0x08001340
 800131c:	08001340 	.word	0x08001340
 8001320:	08001340 	.word	0x08001340
 8001324:	08001344 	.word	0x08001344

08001328 <_init>:
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132e:	bc08      	pop	{r3}
 8001330:	469e      	mov	lr, r3
 8001332:	4770      	bx	lr

08001334 <_fini>:
 8001334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133a:	bc08      	pop	{r3}
 800133c:	469e      	mov	lr, r3
 800133e:	4770      	bx	lr
