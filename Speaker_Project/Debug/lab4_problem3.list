
lab4_problem3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000980  08000988  00010988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000980  08000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000984  08000984  00010984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000988  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000988  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010988  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f0d  00000000  00000000  000109b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003c0  00000000  00000000  000118bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000190  00000000  00000000  00011c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00011e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000aad  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000007f0  00000000  00000000  00012a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00013205  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000048c  00000000  00000000  00013280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000968 	.word	0x08000968

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000968 	.word	0x08000968

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <Update_WatchDog>:
volatile int button =0; // button control variable
volatile int control_interrupt=0;
volatile uint32_t number=0; // our counter value.this value increse 1000 at  every seconds
							// for example if timer come to handler function five times, number should be 5000
							//after ten times our seven segment display 9999
void Update_WatchDog(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	IWDG->SR=0x7;
 8000330:	4b02      	ldr	r3, [pc, #8]	; (800033c <Update_WatchDog+0x10>)
 8000332:	2207      	movs	r2, #7
 8000334:	60da      	str	r2, [r3, #12]
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40003000 	.word	0x40003000

08000340 <System_Init>:
void System_Init(){// all initialize are this function
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	IWDG->KR=0x5555;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <System_Init+0x38>)
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <System_Init+0x3c>)
 8000348:	601a      	str	r2, [r3, #0]
	IWDG->PR=0x7;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <System_Init+0x38>)
 800034c:	2207      	movs	r2, #7
 800034e:	605a      	str	r2, [r3, #4]
	IWDG->RLR=0xFFF;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <System_Init+0x38>)
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <System_Init+0x40>)
 8000354:	609a      	str	r2, [r3, #8]
	IWDG->WINR=0xFFF;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <System_Init+0x38>)
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <System_Init+0x40>)
 800035a:	611a      	str	r2, [r3, #16]
	IWDG->KR=0xCCCC;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <System_Init+0x38>)
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <System_Init+0x44>)
 8000360:	601a      	str	r2, [r3, #0]
	System_Segment_Init(); // SSD initialize
 8000362:	f000 f91d 	bl	80005a0 <System_Segment_Init>
    System_LED_Init();   // led initialize
 8000366:	f000 fa51 	bl	800080c <System_LED_Init>
	System_Button_Init();  //button initialize
 800036a:	f000 fa77 	bl	800085c <System_Button_Init>
	System_Timer_Init();  // timer initialize
 800036e:	f000 f80b 	bl	8000388 <System_Timer_Init>
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40003000 	.word	0x40003000
 800037c:	00005555 	.word	0x00005555
 8000380:	00000fff 	.word	0x00000fff
 8000384:	0000cccc 	.word	0x0000cccc

08000388 <System_Timer_Init>:
		}

	}
}

void System_Timer_Init(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
		RCC->APBENR1 |=(1U<<1);
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <System_Timer_Init+0x64>)
 800038e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <System_Timer_Init+0x64>)
 8000392:	2102      	movs	r1, #2
 8000394:	430a      	orrs	r2, r1
 8000396:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CR1=0;
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <System_Timer_Init+0x68>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
		TIM3->CR1 |=(1<<7);
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <System_Timer_Init+0x68>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <System_Timer_Init+0x68>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
		TIM3->CNT =0;
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <System_Timer_Init+0x68>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->PSC=999;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <System_Timer_Init+0x68>)
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <System_Timer_Init+0x6c>)
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR=(16000); // 1 sn
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <System_Timer_Init+0x68>)
 80003b8:	22fa      	movs	r2, #250	; 0xfa
 80003ba:	0192      	lsls	r2, r2, #6
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->DIER |=(1<<0);
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <System_Timer_Init+0x68>)
 80003c0:	68da      	ldr	r2, [r3, #12]
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <System_Timer_Init+0x68>)
 80003c4:	2101      	movs	r1, #1
 80003c6:	430a      	orrs	r2, r1
 80003c8:	60da      	str	r2, [r3, #12]
		TIM3->CR1 |= (1<<0);
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <System_Timer_Init+0x68>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <System_Timer_Init+0x68>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
		NVIC_SetPriority(TIM3_IRQn,1);
 80003d6:	2101      	movs	r1, #1
 80003d8:	2010      	movs	r0, #16
 80003da:	f7ff ff39 	bl	8000250 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM3_IRQn);
 80003de:	2010      	movs	r0, #16
 80003e0:	f7ff ff1c 	bl	800021c <__NVIC_EnableIRQ>

}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40000400 	.word	0x40000400
 80003f4:	000003e7 	.word	0x000003e7

080003f8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
		for(int j=0;j<100;j++){
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	e014      	b.n	800042e <TIM3_IRQHandler+0x36>
			number=number+1; // every second,number increase 1000 times and we can see display
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <TIM3_IRQHandler+0x54>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <TIM3_IRQHandler+0x54>)
 800040c:	601a      	str	r2, [r3, #0]
			if(number==9999){ // if number is 9999 ,counter process should finish
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <TIM3_IRQHandler+0x54>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <TIM3_IRQHandler+0x58>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d102      	bne.n	800041e <TIM3_IRQHandler+0x26>
				number=0;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <TIM3_IRQHandler+0x54>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]

			}
			Number_Find(number);
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <TIM3_IRQHandler+0x54>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	0018      	movs	r0, r3
 8000424:	f000 f858 	bl	80004d8 <Number_Find>
		for(int j=0;j<100;j++){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3301      	adds	r3, #1
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b63      	cmp	r3, #99	; 0x63
 8000432:	dde7      	ble.n	8000404 <TIM3_IRQHandler+0xc>
		}



	TIM3->SR &=  ~(1U<<0);
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <TIM3_IRQHandler+0x5c>)
 8000436:	691a      	ldr	r2, [r3, #16]
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <TIM3_IRQHandler+0x5c>)
 800043a:	2101      	movs	r1, #1
 800043c:	438a      	bics	r2, r1
 800043e:	611a      	str	r2, [r3, #16]
	Update_WatchDog();
 8000440:	f7ff ff74 	bl	800032c <Update_WatchDog>
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000001c 	.word	0x2000001c
 8000450:	0000270f 	.word	0x0000270f
 8000454:	40000400 	.word	0x40000400

08000458 <Display_Number>:


void Display_Number(int a){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if(a==0)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d102      	bne.n	800046c <Display_Number+0x14>
		System_Number0();
 8000466:	f000 f9a3 	bl	80007b0 <System_Number0>
	else if (a==8)
			System_Number8();
	else
		System_Number9();

}
 800046a:	e031      	b.n	80004d0 <Display_Number+0x78>
	else if (a==1)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d102      	bne.n	8000478 <Display_Number+0x20>
		System_Number1();
 8000472:	f000 f943 	bl	80006fc <System_Number1>
}
 8000476:	e02b      	b.n	80004d0 <Display_Number+0x78>
	else if (a==2)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d102      	bne.n	8000484 <Display_Number+0x2c>
			System_Number2();
 800047e:	f000 f947 	bl	8000710 <System_Number2>
}
 8000482:	e025      	b.n	80004d0 <Display_Number+0x78>
	else if (a==3)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b03      	cmp	r3, #3
 8000488:	d102      	bne.n	8000490 <Display_Number+0x38>
			System_Number3();
 800048a:	f000 f94b 	bl	8000724 <System_Number3>
}
 800048e:	e01f      	b.n	80004d0 <Display_Number+0x78>
	else if (a==4)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d102      	bne.n	800049c <Display_Number+0x44>
			System_Number4();
 8000496:	f000 f94f 	bl	8000738 <System_Number4>
}
 800049a:	e019      	b.n	80004d0 <Display_Number+0x78>
	else if (a==5)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b05      	cmp	r3, #5
 80004a0:	d102      	bne.n	80004a8 <Display_Number+0x50>
			System_Number5();
 80004a2:	f000 f953 	bl	800074c <System_Number5>
}
 80004a6:	e013      	b.n	80004d0 <Display_Number+0x78>
	else if (a==6)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b06      	cmp	r3, #6
 80004ac:	d102      	bne.n	80004b4 <Display_Number+0x5c>
			System_Number6();
 80004ae:	f000 f957 	bl	8000760 <System_Number6>
}
 80004b2:	e00d      	b.n	80004d0 <Display_Number+0x78>
	else if (a==7)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b07      	cmp	r3, #7
 80004b8:	d102      	bne.n	80004c0 <Display_Number+0x68>
			System_Number7();
 80004ba:	f000 f95b 	bl	8000774 <System_Number7>
}
 80004be:	e007      	b.n	80004d0 <Display_Number+0x78>
	else if (a==8)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b08      	cmp	r3, #8
 80004c4:	d102      	bne.n	80004cc <Display_Number+0x74>
			System_Number8();
 80004c6:	f000 f95f 	bl	8000788 <System_Number8>
}
 80004ca:	e001      	b.n	80004d0 <Display_Number+0x78>
		System_Number9();
 80004cc:	f000 f966 	bl	800079c <System_Number9>
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Number_Find>:
void Number_Find(uint32_t number){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint32_t binler,yuzler,onlar;
	uint32_t number_t;
	for(int i=0;i<2;i++){
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	e054      	b.n	8000590 <Number_Find+0xb8>
		number_t=number;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	61bb      	str	r3, [r7, #24]
		//number_t=number_t%0;
		binler=(number_t/1000);
 80004ea:	69ba      	ldr	r2, [r7, #24]
 80004ec:	23fa      	movs	r3, #250	; 0xfa
 80004ee:	0099      	lsls	r1, r3, #2
 80004f0:	0010      	movs	r0, r2
 80004f2:	f7ff fe07 	bl	8000104 <__udivsi3>
 80004f6:	0003      	movs	r3, r0
 80004f8:	617b      	str	r3, [r7, #20]

		Delay(60);
 80004fa:	203c      	movs	r0, #60	; 0x3c
 80004fc:	f000 f9c6 	bl	800088c <Delay>
		System_D1();
 8000500:	f000 f960 	bl	80007c4 <System_D1>
		Display_Number(binler);
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff ffa6 	bl	8000458 <Display_Number>

		number_t=number%1000; // find hunders digits
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	23fa      	movs	r3, #250	; 0xfa
 8000510:	0099      	lsls	r1, r3, #2
 8000512:	0010      	movs	r0, r2
 8000514:	f7ff fe7c 	bl	8000210 <__aeabi_uidivmod>
 8000518:	000b      	movs	r3, r1
 800051a:	61bb      	str	r3, [r7, #24]
		yuzler=(number_t /100);
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	2164      	movs	r1, #100	; 0x64
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff fdef 	bl	8000104 <__udivsi3>
 8000526:	0003      	movs	r3, r0
 8000528:	613b      	str	r3, [r7, #16]

		Delay(60);
 800052a:	203c      	movs	r0, #60	; 0x3c
 800052c:	f000 f9ae 	bl	800088c <Delay>
		System_D2();
 8000530:	f000 f951 	bl	80007d6 <System_D2>
		Display_Number(yuzler);
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff ff8e 	bl	8000458 <Display_Number>

		number_t=number_t%100;  // find tens digits
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	2164      	movs	r1, #100	; 0x64
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fe65 	bl	8000210 <__aeabi_uidivmod>
 8000546:	000b      	movs	r3, r1
 8000548:	61bb      	str	r3, [r7, #24]
		onlar=number_t/10;
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	210a      	movs	r1, #10
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fdd8 	bl	8000104 <__udivsi3>
 8000554:	0003      	movs	r3, r0
 8000556:	60fb      	str	r3, [r7, #12]

		Delay(60);
 8000558:	203c      	movs	r0, #60	; 0x3c
 800055a:	f000 f997 	bl	800088c <Delay>
		System_D3();
 800055e:	f000 f943 	bl	80007e8 <System_D3>
		Display_Number(onlar);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff ff77 	bl	8000458 <Display_Number>

		number_t=number_t%10;  // find birler digits
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	210a      	movs	r1, #10
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe4e 	bl	8000210 <__aeabi_uidivmod>
 8000574:	000b      	movs	r3, r1
 8000576:	61bb      	str	r3, [r7, #24]

		Delay(60);
 8000578:	203c      	movs	r0, #60	; 0x3c
 800057a:	f000 f987 	bl	800088c <Delay>
		System_D4();
 800057e:	f000 f93c 	bl	80007fa <System_D4>
		Display_Number(number_t);
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	0018      	movs	r0, r3
 8000586:	f7ff ff67 	bl	8000458 <Display_Number>
	for(int i=0;i<2;i++){
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	3301      	adds	r3, #1
 800058e:	61fb      	str	r3, [r7, #28]
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	2b01      	cmp	r3, #1
 8000594:	dda7      	ble.n	80004e6 <Number_Find+0xe>
	}
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b008      	add	sp, #32
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <System_Segment_Init>:

void System_Segment_Init(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	 RCC->IOPENR |= (3U << 0);
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <System_Segment_Init+0x148>)
 80005a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a8:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <System_Segment_Init+0x148>)
 80005aa:	2103      	movs	r1, #3
 80005ac:	430a      	orrs	r2, r1
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34

	 GPIOA->MODER &=  ~(3U<<2*0); //pa0
 80005b0:	23a0      	movs	r3, #160	; 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	23a0      	movs	r3, #160	; 0xa0
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2103      	movs	r1, #3
 80005bc:	438a      	bics	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1U<<0);
 80005c0:	23a0      	movs	r3, #160	; 0xa0
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2101      	movs	r1, #1
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]


	 GPIOA->MODER &=  ~(3U <<2*1); //pa1  as output
 80005d0:	23a0      	movs	r3, #160	; 0xa0
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	23a0      	movs	r3, #160	; 0xa0
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	210c      	movs	r1, #12
 80005dc:	438a      	bics	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2);
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2104      	movs	r1, #4
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*4); //pa4  as output
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	493c      	ldr	r1, [pc, #240]	; (80006ec <System_Segment_Init+0x14c>)
 80005fc:	400a      	ands	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 8);
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0049      	lsls	r1, r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*5); //pa5  as output
 8000612:	23a0      	movs	r3, #160	; 0xa0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	23a0      	movs	r3, #160	; 0xa0
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	4934      	ldr	r1, [pc, #208]	; (80006f0 <System_Segment_Init+0x150>)
 800061e:	400a      	ands	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 10);
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	00c9      	lsls	r1, r1, #3
 8000630:	430a      	orrs	r2, r1
 8000632:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U << 0); //pB0  output
 8000634:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <System_Segment_Init+0x154>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <System_Segment_Init+0x154>)
 800063a:	2103      	movs	r1, #3
 800063c:	438a      	bics	r2, r1
 800063e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 0);
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <System_Segment_Init+0x154>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <System_Segment_Init+0x154>)
 8000646:	2101      	movs	r1, #1
 8000648:	430a      	orrs	r2, r1
 800064a:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U << 2*1); //pB1  output
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <System_Segment_Init+0x154>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <System_Segment_Init+0x154>)
 8000652:	210c      	movs	r1, #12
 8000654:	438a      	bics	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 2);
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <System_Segment_Init+0x154>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <System_Segment_Init+0x154>)
 800065e:	2104      	movs	r1, #4
 8000660:	430a      	orrs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U << 2*2); //pB2  output
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <System_Segment_Init+0x154>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <System_Segment_Init+0x154>)
 800066a:	2130      	movs	r1, #48	; 0x30
 800066c:	438a      	bics	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 4);
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <System_Segment_Init+0x154>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <System_Segment_Init+0x154>)
 8000676:	2110      	movs	r1, #16
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 3); //pB3  output
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <System_Segment_Init+0x154>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <System_Segment_Init+0x154>)
 8000682:	21c0      	movs	r1, #192	; 0xc0
 8000684:	438a      	bics	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 6);
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <System_Segment_Init+0x154>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <System_Segment_Init+0x154>)
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	430a      	orrs	r2, r1
 8000692:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 4); //pB4  output
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <System_Segment_Init+0x154>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <System_Segment_Init+0x154>)
 800069a:	4914      	ldr	r1, [pc, #80]	; (80006ec <System_Segment_Init+0x14c>)
 800069c:	400a      	ands	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 8);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <System_Segment_Init+0x154>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <System_Segment_Init+0x154>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	0049      	lsls	r1, r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 5); //pB5  output
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <System_Segment_Init+0x154>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <System_Segment_Init+0x154>)
 80006b4:	490e      	ldr	r1, [pc, #56]	; (80006f0 <System_Segment_Init+0x150>)
 80006b6:	400a      	ands	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 10);
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <System_Segment_Init+0x154>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <System_Segment_Init+0x154>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	00c9      	lsls	r1, r1, #3
 80006c4:	430a      	orrs	r2, r1
 80006c6:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &=  ~(3U <<2* 6); //pB6  output
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <System_Segment_Init+0x154>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <System_Segment_Init+0x154>)
 80006ce:	490a      	ldr	r1, [pc, #40]	; (80006f8 <System_Segment_Init+0x158>)
 80006d0:	400a      	ands	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |=  (1 << 12);
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <System_Segment_Init+0x154>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <System_Segment_Init+0x154>)
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0149      	lsls	r1, r1, #5
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	fffffcff 	.word	0xfffffcff
 80006f0:	fffff3ff 	.word	0xfffff3ff
 80006f4:	50000400 	.word	0x50000400
 80006f8:	ffffcfff 	.word	0xffffcfff

080006fc <System_Number1>:


void System_Number1(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x79  ;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <System_Number1+0x10>)
 8000702:	2279      	movs	r2, #121	; 0x79
 8000704:	615a      	str	r2, [r3, #20]
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	50000400 	.word	0x50000400

08000710 <System_Number2>:
void System_Number2(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xA4  ;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <System_Number2+0x10>)
 8000716:	22a4      	movs	r2, #164	; 0xa4
 8000718:	615a      	str	r2, [r3, #20]
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	50000400 	.word	0x50000400

08000724 <System_Number3>:
void System_Number3(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xB0  ;
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <System_Number3+0x10>)
 800072a:	22b0      	movs	r2, #176	; 0xb0
 800072c:	615a      	str	r2, [r3, #20]
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	50000400 	.word	0x50000400

08000738 <System_Number4>:
void System_Number4(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x99  ;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <System_Number4+0x10>)
 800073e:	2299      	movs	r2, #153	; 0x99
 8000740:	615a      	str	r2, [r3, #20]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	50000400 	.word	0x50000400

0800074c <System_Number5>:
void System_Number5(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x92  ;
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <System_Number5+0x10>)
 8000752:	2292      	movs	r2, #146	; 0x92
 8000754:	615a      	str	r2, [r3, #20]
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	50000400 	.word	0x50000400

08000760 <System_Number6>:
void System_Number6(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

	GPIOB->ODR =0x2  ;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <System_Number6+0x10>)
 8000766:	2202      	movs	r2, #2
 8000768:	615a      	str	r2, [r3, #20]
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	50000400 	.word	0x50000400

08000774 <System_Number7>:
void System_Number7(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	GPIOB->ODR =0xF8  ;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <System_Number7+0x10>)
 800077a:	22f8      	movs	r2, #248	; 0xf8
 800077c:	615a      	str	r2, [r3, #20]
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	50000400 	.word	0x50000400

08000788 <System_Number8>:
void System_Number8(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	GPIOB->ODR =0  ;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <System_Number8+0x10>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	50000400 	.word	0x50000400

0800079c <System_Number9>:
void System_Number9(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x90  ;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <System_Number9+0x10>)
 80007a2:	2290      	movs	r2, #144	; 0x90
 80007a4:	615a      	str	r2, [r3, #20]
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	50000400 	.word	0x50000400

080007b0 <System_Number0>:
void System_Number0(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	GPIOB->ODR =0x40  ;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <System_Number0+0x10>)
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	615a      	str	r2, [r3, #20]
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	50000400 	.word	0x50000400

080007c4 <System_D1>:
void System_D_Reset(){
	GPIOA->ODR =0;
}


void System_D1(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	GPIOA->ODR =1; //pa0
 80007c8:	23a0      	movs	r3, #160	; 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <System_D2>:
void System_D2(){
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
	GPIOA->ODR =2; //PA1
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2202      	movs	r2, #2
 80007e0:	615a      	str	r2, [r3, #20]
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <System_D3>:
void System_D3(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	GPIOA->ODR =16 ; //PA4
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	2210      	movs	r2, #16
 80007f2:	615a      	str	r2, [r3, #20]
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <System_D4>:
void System_D4(){
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
	GPIOA->ODR=32; //PA5
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2220      	movs	r2, #32
 8000804:	615a      	str	r2, [r3, #20]
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <System_LED_Init>:
void System_LED_Init(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	 /* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <System_LED_Init+0x48>)
 8000812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <System_LED_Init+0x48>)
 8000816:	2103      	movs	r1, #3
 8000818:	430a      	orrs	r2, r1
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
	 /* Setup PA6 as output */
	    GPIOA->MODER &=  ~(3U <<2* 6); //pA6  output
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <System_LED_Init+0x4c>)
 8000828:	400a      	ands	r2, r1
 800082a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |=  (1 << 12);
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	0149      	lsls	r1, r1, #5
 800083a:	430a      	orrs	r2, r1
 800083c:	601a      	str	r2, [r3, #0]

	    GPIOA->BRR |=(1<<0);
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	ffffcfff 	.word	0xffffcfff

0800085c <System_Button_Init>:
	GPIOA->ODR &=  ~(1U<<6); // GPIOA's ODR first bit is 0
}



void System_Button_Init(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	/* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (3U << 0);
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <System_Button_Init+0x24>)
 8000862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <System_Button_Init+0x24>)
 8000866:	2103      	movs	r1, #3
 8000868:	430a      	orrs	r2, r1
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
    /*set pb7 as input */
	    GPIOB->MODER &= ~(3U << 2*7);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <System_Button_Init+0x28>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <System_Button_Init+0x28>)
 8000872:	4905      	ldr	r1, [pc, #20]	; (8000888 <System_Button_Init+0x2c>)
 8000874:	400a      	ands	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000
 8000884:	50000400 	.word	0x50000400
 8000888:	ffff3fff 	.word	0xffff3fff

0800088c <Delay>:
		return 1;
	}
	else
		return 0 ;
}
void Delay(volatile uint32_t s) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000894:	e002      	b.n	800089c <Delay+0x10>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3b01      	subs	r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f9      	bne.n	8000896 <Delay+0xa>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}

080008aa <main>:





int main(void) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
	System_Init();
 80008ae:	f7ff fd47 	bl	8000340 <System_Init>


    while(1) {
 80008b2:	e7fe      	b.n	80008b2 <main+0x8>

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b8:	f000 f826 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	; (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	; (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008e2:	f000 f81d 	bl	8000920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff ffe0 	bl	80008aa <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008f8:	08000988 	.word	0x08000988
  ldr r2, =_sbss
 80008fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000900:	20000020 	.word	0x20000020

08000904 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_COMP_IRQHandler>
	...

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <SystemInit+0x14>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	0512      	lsls	r2, r2, #20
 8000912:	609a      	str	r2, [r3, #8]
#endif
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__libc_init_array>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	2600      	movs	r6, #0
 8000924:	4d0c      	ldr	r5, [pc, #48]	; (8000958 <__libc_init_array+0x38>)
 8000926:	4c0d      	ldr	r4, [pc, #52]	; (800095c <__libc_init_array+0x3c>)
 8000928:	1b64      	subs	r4, r4, r5
 800092a:	10a4      	asrs	r4, r4, #2
 800092c:	42a6      	cmp	r6, r4
 800092e:	d109      	bne.n	8000944 <__libc_init_array+0x24>
 8000930:	2600      	movs	r6, #0
 8000932:	f000 f819 	bl	8000968 <_init>
 8000936:	4d0a      	ldr	r5, [pc, #40]	; (8000960 <__libc_init_array+0x40>)
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <__libc_init_array+0x44>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	42a6      	cmp	r6, r4
 8000940:	d105      	bne.n	800094e <__libc_init_array+0x2e>
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	00b3      	lsls	r3, r6, #2
 8000946:	58eb      	ldr	r3, [r5, r3]
 8000948:	4798      	blx	r3
 800094a:	3601      	adds	r6, #1
 800094c:	e7ee      	b.n	800092c <__libc_init_array+0xc>
 800094e:	00b3      	lsls	r3, r6, #2
 8000950:	58eb      	ldr	r3, [r5, r3]
 8000952:	4798      	blx	r3
 8000954:	3601      	adds	r6, #1
 8000956:	e7f2      	b.n	800093e <__libc_init_array+0x1e>
 8000958:	08000980 	.word	0x08000980
 800095c:	08000980 	.word	0x08000980
 8000960:	08000980 	.word	0x08000980
 8000964:	08000984 	.word	0x08000984

08000968 <_init>:
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096e:	bc08      	pop	{r3}
 8000970:	469e      	mov	lr, r3
 8000972:	4770      	bx	lr

08000974 <_fini>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097a:	bc08      	pop	{r3}
 800097c:	469e      	mov	lr, r3
 800097e:	4770      	bx	lr
