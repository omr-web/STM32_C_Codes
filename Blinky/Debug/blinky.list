
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000238  08000240  00010240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800023c  0800023c  0001023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000240  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  08000240  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
  9 .debug_info   000007c7  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000023a  00000000  00000000  00010a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  00010c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00010cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000050e  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000003a0  00000000  00000000  00011256  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  000115f6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000e0  00000000  00000000  00011674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000220 	.word	0x08000220

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000220 	.word	0x08000220

08000104 <HardFault_Handler>:
#define LEDDELAY    1600000

void delay(volatile uint32_t);

 // set stack pointer
void HardFault_Handler(){
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

	Reset_Handler();
 8000108:	f000 f830 	bl	800016c <Reset_Handler>
}
 800010c:	46c0      	nop			; (mov r8, r8)
 800010e:	46bd      	mov	sp, r7
 8000110:	bd80      	pop	{r7, pc}
	...

08000114 <main>:

int main(void) {
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0

    /* Enable GPIOA and GPIOB clocks */
    RCC->IOPENR |=  (3U << 0);
 8000118:	4b11      	ldr	r3, [pc, #68]	; (8000160 <main+0x4c>)
 800011a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800011c:	4b10      	ldr	r3, [pc, #64]	; (8000160 <main+0x4c>)
 800011e:	2103      	movs	r1, #3
 8000120:	430a      	orrs	r2, r1
 8000122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Setup PB3 as input */
    GPIOB->MODER &= ~(3U << 6);
 8000124:	4b0f      	ldr	r3, [pc, #60]	; (8000164 <main+0x50>)
 8000126:	681a      	ldr	r2, [r3, #0]
 8000128:	4b0e      	ldr	r3, [pc, #56]	; (8000164 <main+0x50>)
 800012a:	21c0      	movs	r1, #192	; 0xc0
 800012c:	438a      	bics	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
    /* Setup PA0 as output */
    GPIOA->MODER |=(1U<<2); // GPIOA_MODER third bit is equal to 1
 8000130:	23a0      	movs	r3, #160	; 0xa0
 8000132:	05db      	lsls	r3, r3, #23
 8000134:	681a      	ldr	r2, [r3, #0]
 8000136:	23a0      	movs	r3, #160	; 0xa0
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	2104      	movs	r1, #4
 800013c:	430a      	orrs	r2, r1
 800013e:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &=  ~(1U<<3);// GPIOA_MODER fourth bit is equal to 0
 8000140:	23a0      	movs	r3, #160	; 0xa0
 8000142:	05db      	lsls	r3, r3, #23
 8000144:	681a      	ldr	r2, [r3, #0]
 8000146:	23a0      	movs	r3, #160	; 0xa0
 8000148:	05db      	lsls	r3, r3, #23
 800014a:	2108      	movs	r1, #8
 800014c:	438a      	bics	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
        	GPIOA->ODR |= (1<<1);
        }

        */

    	EXTI->RPR1 |=(1U<<3);
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <main+0x54>)
 8000152:	68da      	ldr	r2, [r3, #12]
 8000154:	4b04      	ldr	r3, [pc, #16]	; (8000168 <main+0x54>)
 8000156:	2108      	movs	r1, #8
 8000158:	430a      	orrs	r2, r1
 800015a:	60da      	str	r2, [r3, #12]
 800015c:	e7f8      	b.n	8000150 <main+0x3c>
 800015e:	46c0      	nop			; (mov r8, r8)
 8000160:	40021000 	.word	0x40021000
 8000164:	50000400 	.word	0x50000400
 8000168:	40021800 	.word	0x40021800

0800016c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800016c:	480d      	ldr	r0, [pc, #52]	; (80001a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800016e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000170:	f000 f826 	bl	80001c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000174:	480c      	ldr	r0, [pc, #48]	; (80001a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000176:	490d      	ldr	r1, [pc, #52]	; (80001ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000178:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <LoopForever+0xe>)
  movs r3, #0
 800017a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800017c:	e002      	b.n	8000184 <LoopCopyDataInit>

0800017e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800017e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000182:	3304      	adds	r3, #4

08000184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000188:	d3f9      	bcc.n	800017e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800018a:	4a0a      	ldr	r2, [pc, #40]	; (80001b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800018c:	4c0a      	ldr	r4, [pc, #40]	; (80001b8 <LoopForever+0x16>)
  movs r3, #0
 800018e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000190:	e001      	b.n	8000196 <LoopFillZerobss>

08000192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000194:	3204      	adds	r2, #4

08000196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000198:	d3fb      	bcc.n	8000192 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800019a:	f000 f81d 	bl	80001d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800019e:	f7ff ffb9 	bl	8000114 <main>

080001a2 <LoopForever>:

LoopForever:
    b LoopForever
 80001a2:	e7fe      	b.n	80001a2 <LoopForever>
  ldr   r0, =_estack
 80001a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001b0:	08000240 	.word	0x08000240
  ldr r2, =_sbss
 80001b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001b8:	2000001c 	.word	0x2000001c

080001bc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001bc:	e7fe      	b.n	80001bc <ADC_COMP_IRQHandler>
	...

080001c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001c4:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <SystemInit+0x14>)
 80001c6:	2280      	movs	r2, #128	; 0x80
 80001c8:	0512      	lsls	r2, r2, #20
 80001ca:	609a      	str	r2, [r3, #8]
#endif
}
 80001cc:	46c0      	nop			; (mov r8, r8)
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	46c0      	nop			; (mov r8, r8)
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <__libc_init_array>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	2600      	movs	r6, #0
 80001dc:	4d0c      	ldr	r5, [pc, #48]	; (8000210 <__libc_init_array+0x38>)
 80001de:	4c0d      	ldr	r4, [pc, #52]	; (8000214 <__libc_init_array+0x3c>)
 80001e0:	1b64      	subs	r4, r4, r5
 80001e2:	10a4      	asrs	r4, r4, #2
 80001e4:	42a6      	cmp	r6, r4
 80001e6:	d109      	bne.n	80001fc <__libc_init_array+0x24>
 80001e8:	2600      	movs	r6, #0
 80001ea:	f000 f819 	bl	8000220 <_init>
 80001ee:	4d0a      	ldr	r5, [pc, #40]	; (8000218 <__libc_init_array+0x40>)
 80001f0:	4c0a      	ldr	r4, [pc, #40]	; (800021c <__libc_init_array+0x44>)
 80001f2:	1b64      	subs	r4, r4, r5
 80001f4:	10a4      	asrs	r4, r4, #2
 80001f6:	42a6      	cmp	r6, r4
 80001f8:	d105      	bne.n	8000206 <__libc_init_array+0x2e>
 80001fa:	bd70      	pop	{r4, r5, r6, pc}
 80001fc:	00b3      	lsls	r3, r6, #2
 80001fe:	58eb      	ldr	r3, [r5, r3]
 8000200:	4798      	blx	r3
 8000202:	3601      	adds	r6, #1
 8000204:	e7ee      	b.n	80001e4 <__libc_init_array+0xc>
 8000206:	00b3      	lsls	r3, r6, #2
 8000208:	58eb      	ldr	r3, [r5, r3]
 800020a:	4798      	blx	r3
 800020c:	3601      	adds	r6, #1
 800020e:	e7f2      	b.n	80001f6 <__libc_init_array+0x1e>
 8000210:	08000238 	.word	0x08000238
 8000214:	08000238 	.word	0x08000238
 8000218:	08000238 	.word	0x08000238
 800021c:	0800023c 	.word	0x0800023c

08000220 <_init>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	46c0      	nop			; (mov r8, r8)
 8000224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000226:	bc08      	pop	{r3}
 8000228:	469e      	mov	lr, r3
 800022a:	4770      	bx	lr

0800022c <_fini>:
 800022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000232:	bc08      	pop	{r3}
 8000234:	469e      	mov	lr, r3
 8000236:	4770      	bx	lr
