
lab3_problem3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  0800048c  0001048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  0800048c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  0800048c  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a8e  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002af  00000000  00000000  00010f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000098  00000000  00000000  000111f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00011290  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000057a  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000005da  00000000  00000000  0001187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00011e54  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000013c  00000000  00000000  00011ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800046c 	.word	0x0800046c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	0800046c 	.word	0x0800046c

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <EXTI2_3_IRQHandler>:
#define LEDDELAY    11949990

void delay(volatile uint32_t);


void EXTI2_3_IRQHandler (){  // FOR  PA0 LED
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	GPIOA->ODR |=(1U<<0);
 8000218:	23a0      	movs	r3, #160	; 0xa0
 800021a:	05db      	lsls	r3, r3, #23
 800021c:	695a      	ldr	r2, [r3, #20]
 800021e:	23a0      	movs	r3, #160	; 0xa0
 8000220:	05db      	lsls	r3, r3, #23
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <EXTI2_3_IRQHandler+0x40>)
 800022a:	0018      	movs	r0, r3
 800022c:	f000 f8b4 	bl	8000398 <delay>
	GPIOA->ODR &= ~(1U<<0);
 8000230:	23a0      	movs	r3, #160	; 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	23a0      	movs	r3, #160	; 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2101      	movs	r1, #1
 800023c:	438a      	bics	r2, r1
 800023e:	615a      	str	r2, [r3, #20]

	EXTI->RPR1 |=(1<<3);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <EXTI2_3_IRQHandler+0x44>)
 8000242:	68da      	ldr	r2, [r3, #12]
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <EXTI2_3_IRQHandler+0x44>)
 8000246:	2108      	movs	r1, #8
 8000248:	430a      	orrs	r2, r1
 800024a:	60da      	str	r2, [r3, #12]
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	00b657a6 	.word	0x00b657a6
 8000258:	40021800 	.word	0x40021800

0800025c <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(){  // FOR PA1 LED
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0


	GPIOA->ODR |=(1<<1);
 8000260:	23a0      	movs	r3, #160	; 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2102      	movs	r1, #2
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <EXTI4_15_IRQHandler+0x48>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f890 	bl	8000398 <delay>
	GPIOA->ODR &= ~(1U<<1);
 8000278:	23a0      	movs	r3, #160	; 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	23a0      	movs	r3, #160	; 0xa0
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2102      	movs	r1, #2
 8000284:	438a      	bics	r2, r1
 8000286:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <EXTI4_15_IRQHandler+0x48>)
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f884 	bl	8000398 <delay>
	EXTI->RPR1 |=(1<<7);
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <EXTI4_15_IRQHandler+0x4c>)
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <EXTI4_15_IRQHandler+0x4c>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	430a      	orrs	r2, r1
 800029a:	60da      	str	r2, [r3, #12]

}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	00b657a6 	.word	0x00b657a6
 80002a8:	40021800 	.word	0x40021800

080002ac <main>:
int main(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

    /* Enable GPIOB and GPIOA clock */
    RCC->IOPENR |= (3U << 0);
 80002b0:	4b35      	ldr	r3, [pc, #212]	; (8000388 <main+0xdc>)
 80002b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <main+0xdc>)
 80002b6:	2103      	movs	r1, #3
 80002b8:	430a      	orrs	r2, r1
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Setup PB3 as input */
    GPIOB->MODER &= ~(3U << 2*3);
 80002bc:	4b33      	ldr	r3, [pc, #204]	; (800038c <main+0xe0>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b32      	ldr	r3, [pc, #200]	; (800038c <main+0xe0>)
 80002c2:	21c0      	movs	r1, #192	; 0xc0
 80002c4:	438a      	bics	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]

    /* Setup PA0 as output */
    GPIOA->MODER |=(1U<<0); // GPIOA_MODER first bit is equal to 1
 80002c8:	23a0      	movs	r3, #160	; 0xa0
 80002ca:	05db      	lsls	r3, r3, #23
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	23a0      	movs	r3, #160	; 0xa0
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2101      	movs	r1, #1
 80002d4:	430a      	orrs	r2, r1
 80002d6:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &=  ~(1U<<1);// GPIOA_MODER second bit is equal to 0
 80002d8:	23a0      	movs	r3, #160	; 0xa0
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	23a0      	movs	r3, #160	; 0xa0
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2102      	movs	r1, #2
 80002e4:	438a      	bics	r2, r1
 80002e6:	601a      	str	r2, [r3, #0]

    /* Setup PA1 as output */
    GPIOA->MODER |=(1U<<2*1); // GPIOA_MODER third bit is equal to 1
 80002e8:	23a0      	movs	r3, #160	; 0xa0
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	23a0      	movs	r3, #160	; 0xa0
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	2104      	movs	r1, #4
 80002f4:	430a      	orrs	r2, r1
 80002f6:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &=  ~(1U<<3);// GPIOA_MODER fourth bit is equal to 0
 80002f8:	23a0      	movs	r3, #160	; 0xa0
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	23a0      	movs	r3, #160	; 0xa0
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2108      	movs	r1, #8
 8000304:	438a      	bics	r2, r1
 8000306:	601a      	str	r2, [r3, #0]


    /* Setup PB7 as input */
    GPIOB->MODER &= ~(3U << 2*7);
 8000308:	4b20      	ldr	r3, [pc, #128]	; (800038c <main+0xe0>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <main+0xe0>)
 800030e:	4920      	ldr	r1, [pc, #128]	; (8000390 <main+0xe4>)
 8000310:	400a      	ands	r2, r1
 8000312:	601a      	str	r2, [r3, #0]
    /* first interrupt is at pb3 second interrupt is at pB7*/

    /* arrangement pb3 as interrupt*/
    EXTI->RTSR1 |=(1U<<3);
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <main+0xe8>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <main+0xe8>)
 800031a:	2108      	movs	r1, #8
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
    EXTI->EXTICR[0] |= (1U<<8*3);
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <main+0xe8>)
 8000322:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <main+0xe8>)
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	0449      	lsls	r1, r1, #17
 800032a:	430a      	orrs	r2, r1
 800032c:	661a      	str	r2, [r3, #96]	; 0x60
    EXTI->IMR1 |=(1<<3);
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <main+0xe8>)
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	58d3      	ldr	r3, [r2, r3]
 8000334:	4917      	ldr	r1, [pc, #92]	; (8000394 <main+0xe8>)
 8000336:	2208      	movs	r2, #8
 8000338:	4313      	orrs	r3, r2
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	508b      	str	r3, [r1, r2]
    NVIC_SetPriority(EXTI2_3_IRQn,1);
 800033e:	2101      	movs	r1, #1
 8000340:	2006      	movs	r0, #6
 8000342:	f7ff fef9 	bl	8000138 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000346:	2006      	movs	r0, #6
 8000348:	f7ff fedc 	bl	8000104 <__NVIC_EnableIRQ>


    /* arrangement pB7 as interrupt*/
    EXTI->RTSR1 |=(1U<<7);
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <main+0xe8>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <main+0xe8>)
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	430a      	orrs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
    EXTI->EXTICR[1] |=  (1u<<8*3);
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <main+0xe8>)
 800035a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <main+0xe8>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0449      	lsls	r1, r1, #17
 8000362:	430a      	orrs	r2, r1
 8000364:	665a      	str	r2, [r3, #100]	; 0x64
    EXTI->IMR1 |=(1<<7);
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <main+0xe8>)
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	58d3      	ldr	r3, [r2, r3]
 800036c:	4909      	ldr	r1, [pc, #36]	; (8000394 <main+0xe8>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	4313      	orrs	r3, r2
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	508b      	str	r3, [r1, r2]
    NVIC_SetPriority(EXTI4_15_IRQn,0);  // pB7
 8000376:	2100      	movs	r1, #0
 8000378:	2007      	movs	r0, #7
 800037a:	f7ff fedd 	bl	8000138 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI4_15_IRQn);
 800037e:	2007      	movs	r0, #7
 8000380:	f7ff fec0 	bl	8000104 <__NVIC_EnableIRQ>

    while(1) {
 8000384:	e7fe      	b.n	8000384 <main+0xd8>
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	40021000 	.word	0x40021000
 800038c:	50000400 	.word	0x50000400
 8000390:	ffff3fff 	.word	0xffff3fff
 8000394:	40021800 	.word	0x40021800

08000398 <delay>:
    }

    return 0;
}

void delay(volatile uint32_t s) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 80003a0:	e002      	b.n	80003a8 <delay+0x10>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1f9      	bne.n	80003a2 <delay+0xa>
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003bc:	f000 f826 	bl	800040c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f81d 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ff5f 	bl	80002ac <main>

080003ee <LoopForever>:

LoopForever:
    b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	2000001c 	.word	0x2000001c

08000408 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_COMP_IRQHandler>
	...

0800040c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <SystemInit+0x14>)
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	0512      	lsls	r2, r2, #20
 8000416:	609a      	str	r2, [r3, #8]
#endif
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	2600      	movs	r6, #0
 8000428:	4d0c      	ldr	r5, [pc, #48]	; (800045c <__libc_init_array+0x38>)
 800042a:	4c0d      	ldr	r4, [pc, #52]	; (8000460 <__libc_init_array+0x3c>)
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	2600      	movs	r6, #0
 8000436:	f000 f819 	bl	800046c <_init>
 800043a:	4d0a      	ldr	r5, [pc, #40]	; (8000464 <__libc_init_array+0x40>)
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <__libc_init_array+0x44>)
 800043e:	1b64      	subs	r4, r4, r5
 8000440:	10a4      	asrs	r4, r4, #2
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	00b3      	lsls	r3, r6, #2
 800044a:	58eb      	ldr	r3, [r5, r3]
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	00b3      	lsls	r3, r6, #2
 8000454:	58eb      	ldr	r3, [r5, r3]
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
